// Generated by gir (https://github.com/gtk-rs/gir @ e0d8d8d645b1)
// from ../gir-files (@ 1c785fc565c4)
// DO NOT EDIT

use gtop_sys::*;
use std::mem::{align_of, size_of};
use std::env;
use std::error::Error;
use std::ffi::OsString;
use std::path::Path;
use std::process::Command;
use std::str;
use tempfile::Builder;

static PACKAGES: &[&str] = &["libgtop-2.0"];

#[derive(Clone, Debug)]
struct Compiler {
    pub args: Vec<String>,
}

impl Compiler {
    pub fn new() -> Result<Self, Box<dyn Error>> {
        let mut args = get_var("CC", "cc")?;
        args.push("-Wno-deprecated-declarations".to_owned());
        // For _Generic
        args.push("-std=c11".to_owned());
        // For %z support in printf when using MinGW.
        args.push("-D__USE_MINGW_ANSI_STDIO".to_owned());
        args.extend(get_var("CFLAGS", "")?);
        args.extend(get_var("CPPFLAGS", "")?);
        args.extend(pkg_config_cflags(PACKAGES)?);
        Ok(Self { args })
    }

    pub fn compile(&self, src: &Path, out: &Path) -> Result<(), Box<dyn Error>> {
        let mut cmd = self.to_command();
        cmd.arg(src);
        cmd.arg("-o");
        cmd.arg(out);
        let status = cmd.spawn()?.wait()?;
        if !status.success() {
            return Err(format!("compilation command {:?} failed, {}", &cmd, status).into());
        }
        Ok(())
    }

    fn to_command(&self) -> Command {
        let mut cmd = Command::new(&self.args[0]);
        cmd.args(&self.args[1..]);
        cmd
    }
}

fn get_var(name: &str, default: &str) -> Result<Vec<String>, Box<dyn Error>> {
    match env::var(name) {
        Ok(value) => Ok(shell_words::split(&value)?),
        Err(env::VarError::NotPresent) => Ok(shell_words::split(default)?),
        Err(err) => Err(format!("{} {}", name, err).into()),
    }
}

fn pkg_config_cflags(packages: &[&str]) -> Result<Vec<String>, Box<dyn Error>> {
    if packages.is_empty() {
        return Ok(Vec::new());
    }
    let pkg_config = env::var_os("PKG_CONFIG")
        .unwrap_or_else(|| OsString::from("pkg-config"));
    let mut cmd = Command::new(pkg_config);
    cmd.arg("--cflags");
    cmd.args(packages);
    let out = cmd.output()?;
    if !out.status.success() {
        return Err(format!("command {:?} returned {}",
                           &cmd, out.status).into());
    }
    let stdout = str::from_utf8(&out.stdout)?;
    Ok(shell_words::split(stdout.trim())?)
}


#[derive(Copy, Clone, Debug, Eq, PartialEq)]
struct Layout {
    size: usize,
    alignment: usize,
}

#[derive(Copy, Clone, Debug, Default, Eq, PartialEq)]
struct Results {
    /// Number of successfully completed tests.
    passed: usize,
    /// Total number of failed tests (including those that failed to compile).
    failed: usize,
}

impl Results {
    fn record_passed(&mut self) {
        self.passed += 1;
    }
    fn record_failed(&mut self) {
        self.failed += 1;
    }
    fn summary(&self) -> String {
        format!("{} passed; {} failed", self.passed, self.failed)
    }
    fn expect_total_success(&self) {
        if self.failed == 0 {
            println!("OK: {}", self.summary());
        } else {
            panic!("FAILED: {}", self.summary());
        };
    }
}

#[test]
#[cfg(target_os = "linux")]
fn cross_validate_constants_with_c() {
    let mut c_constants: Vec<(String, String)> = Vec::new();

    for l in get_c_output("constant").unwrap().lines() {
        let mut words = l.trim().split(';');
        let name = words.next().expect("Failed to parse name").to_owned();
        let value = words
            .next()
            .and_then(|s| s.parse().ok())
            .expect("Failed to parse value");
        c_constants.push((name, value));
    }

    let mut results = Results::default();

    for ((rust_name, rust_value), (c_name, c_value)) in
        RUST_CONSTANTS.iter().zip(c_constants.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {:?}\nC:    {:?}", rust_name, c_name,);
            continue;
        }

        if rust_value != c_value {
            results.record_failed();
            eprintln!(
                "Constant value mismatch for {}\nRust: {:?}\nC:    {:?}",
                rust_name, rust_value, &c_value
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

#[test]
#[cfg(target_os = "linux")]
fn cross_validate_layout_with_c() {
    let mut c_layouts = Vec::new();

    for l in get_c_output("layout").unwrap().lines() {
        let mut words = l.trim().split(';');
        let name = words.next().expect("Failed to parse name").to_owned();
        let size = words
            .next()
            .and_then(|s| s.parse().ok())
            .expect("Failed to parse size");
        let alignment = words
            .next()
            .and_then(|s| s.parse().ok())
            .expect("Failed to parse alignment");
        c_layouts.push((name, Layout { size, alignment }));
    }

    let mut results = Results::default();

    for ((rust_name, rust_layout), (c_name, c_layout)) in
        RUST_LAYOUTS.iter().zip(c_layouts.iter())
    {
        if rust_name != c_name {
            results.record_failed();
            eprintln!("Name mismatch:\nRust: {:?}\nC:    {:?}", rust_name, c_name,);
            continue;
        }

        if rust_layout != c_layout {
            results.record_failed();
            eprintln!(
                "Layout mismatch for {}\nRust: {:?}\nC:    {:?}",
                rust_name, rust_layout, &c_layout
            );
            continue;
        }

        results.record_passed();
    }

    results.expect_total_success();
}

fn get_c_output(name: &str) -> Result<String, Box<dyn Error>> {
    let tmpdir = Builder::new().prefix("abi").tempdir()?;
    let exe = tmpdir.path().join(name);
    let c_file = Path::new("tests").join(name).with_extension("c");

    let cc = Compiler::new().expect("configured compiler");
    cc.compile(&c_file, &exe)?;

    let mut abi_cmd = Command::new(exe);
    let output = abi_cmd.output()?;
    if !output.status.success() {
        return Err(format!("command {:?} failed, {:?}", &abi_cmd, &output).into());
    }

    Ok(String::from_utf8(output.stdout)?)
}

const RUST_LAYOUTS: &[(&str, Layout)] = &[
    ("glibtop", Layout {size: size_of::<glibtop>(), alignment: align_of::<glibtop>()}),
];

const RUST_CONSTANTS: &[(&str, &str)] = &[
    ("AUTH_NAMESZ", "15"),
    ("AUTH_TIMEOUT", "15"),
    ("CONN_INTERNET", "1"),
    ("CONN_IPC", "2"),
    ("CONN_UNIX", "0"),
    ("DEFAULT_PORT", "21490"),
    ("DEFAUTH_NAME", "GNU-SECURE"),
    ("EOT_CHR", "92"),
    ("EOT_STR", ""),
    ("FALSE", "0"),
    ("GLIBTOP_CMND_CPU", "2"),
    ("GLIBTOP_CMND_FSUSAGE", "21"),
    ("GLIBTOP_CMND_LOADAVG", "6"),
    ("GLIBTOP_CMND_MEM", "3"),
    ("GLIBTOP_CMND_MOUNTLIST", "20"),
    ("GLIBTOP_CMND_MSG_LIMITS", "8"),
    ("GLIBTOP_CMND_NETLIST", "24"),
    ("GLIBTOP_CMND_NETLOAD", "22"),
    ("GLIBTOP_CMND_PPP", "23"),
    ("GLIBTOP_CMND_PROCLIST", "10"),
    ("GLIBTOP_CMND_PROC_AFFINITY", "27"),
    ("GLIBTOP_CMND_PROC_ARGS", "18"),
    ("GLIBTOP_CMND_PROC_IO", "28"),
    ("GLIBTOP_CMND_PROC_KERNEL", "16"),
    ("GLIBTOP_CMND_PROC_MAP", "19"),
    ("GLIBTOP_CMND_PROC_MEM", "13"),
    ("GLIBTOP_CMND_PROC_OPEN_FILES", "25"),
    ("GLIBTOP_CMND_PROC_SEGMENT", "17"),
    ("GLIBTOP_CMND_PROC_SIGNAL", "15"),
    ("GLIBTOP_CMND_PROC_STATE", "11"),
    ("GLIBTOP_CMND_PROC_TIME", "14"),
    ("GLIBTOP_CMND_PROC_UID", "12"),
    ("GLIBTOP_CMND_PROC_WD", "26"),
    ("GLIBTOP_CMND_QUIT", "0"),
    ("GLIBTOP_CMND_SEM_LIMITS", "9"),
    ("GLIBTOP_CMND_SHM_LIMITS", "7"),
    ("GLIBTOP_CMND_SWAP", "4"),
    ("GLIBTOP_CMND_SYSDEPS", "1"),
    ("GLIBTOP_CMND_UPTIME", "5"),
    ("GLIBTOP_CPU_FREQUENCY", "5"),
    ("GLIBTOP_CPU_IDLE", "4"),
    ("GLIBTOP_CPU_IOWAIT", "12"),
    ("GLIBTOP_CPU_IRQ", "13"),
    ("GLIBTOP_CPU_NICE", "2"),
    ("GLIBTOP_CPU_SOFTIRQ", "14"),
    ("GLIBTOP_CPU_SYS", "3"),
    ("GLIBTOP_CPU_TOTAL", "0"),
    ("GLIBTOP_CPU_USER", "1"),
    ("GLIBTOP_ERROR_METHOD_ABORT", "3"),
    ("GLIBTOP_ERROR_METHOD_IGNORE", "0"),
    ("GLIBTOP_ERROR_METHOD_WARN", "2"),
    ("GLIBTOP_ERROR_METHOD_WARN_ONCE", "1"),
    ("GLIBTOP_EXCLUDE_IDLE", "4096"),
    ("GLIBTOP_EXCLUDE_NOTTY", "16384"),
    ("GLIBTOP_EXCLUDE_SYSTEM", "8192"),
    ("GLIBTOP_FEATURES_EXCEPT", "8"),
    ("GLIBTOP_FEATURES_NO_SERVER", "4"),
    ("GLIBTOP_FILE_ENTRY_FD", "0"),
    ("GLIBTOP_FILE_ENTRY_INETSOCKET_DST_HOST", "3"),
    ("GLIBTOP_FILE_ENTRY_INETSOCKET_DST_PORT", "4"),
    ("GLIBTOP_FILE_ENTRY_NAME", "1"),
    ("GLIBTOP_FILE_ENTRY_TYPE", "2"),
    ("GLIBTOP_FSUSAGE_BAVAIL", "2"),
    ("GLIBTOP_FSUSAGE_BFREE", "1"),
    ("GLIBTOP_FSUSAGE_BLOCKS", "0"),
    ("GLIBTOP_FSUSAGE_BLOCK_SIZE", "5"),
    ("GLIBTOP_FSUSAGE_FFREE", "4"),
    ("GLIBTOP_FSUSAGE_FILES", "3"),
    ("GLIBTOP_FSUSAGE_READ", "6"),
    ("GLIBTOP_FSUSAGE_WRITE", "7"),
    ("GLIBTOP_INIT_NO_INIT", "2"),
    ("GLIBTOP_INIT_NO_OPEN", "1"),
    ("GLIBTOP_IPC_MSGMAP", "1"),
    ("GLIBTOP_IPC_MSGMAX", "2"),
    ("GLIBTOP_IPC_MSGMNB", "3"),
    ("GLIBTOP_IPC_MSGMNI", "4"),
    ("GLIBTOP_IPC_MSGPOOL", "0"),
    ("GLIBTOP_IPC_MSGSSZ", "5"),
    ("GLIBTOP_IPC_MSGTQL", "6"),
    ("GLIBTOP_IPC_SEMAEM", "9"),
    ("GLIBTOP_IPC_SEMMAP", "0"),
    ("GLIBTOP_IPC_SEMMNI", "1"),
    ("GLIBTOP_IPC_SEMMNS", "2"),
    ("GLIBTOP_IPC_SEMMNU", "3"),
    ("GLIBTOP_IPC_SEMMSL", "4"),
    ("GLIBTOP_IPC_SEMOPM", "5"),
    ("GLIBTOP_IPC_SEMUME", "6"),
    ("GLIBTOP_IPC_SEMUSZ", "7"),
    ("GLIBTOP_IPC_SEMVMX", "8"),
    ("GLIBTOP_IPC_SHMALL", "4"),
    ("GLIBTOP_IPC_SHMMAX", "0"),
    ("GLIBTOP_IPC_SHMMIN", "1"),
    ("GLIBTOP_IPC_SHMMNI", "2"),
    ("GLIBTOP_IPC_SHMSEG", "3"),
    ("GLIBTOP_KERN_PROC_ALL", "0"),
    ("GLIBTOP_KERN_PROC_MASK", "15"),
    ("GLIBTOP_KERN_PROC_PGRP", "2"),
    ("GLIBTOP_KERN_PROC_PID", "1"),
    ("GLIBTOP_KERN_PROC_RUID", "6"),
    ("GLIBTOP_KERN_PROC_SESSION", "3"),
    ("GLIBTOP_KERN_PROC_TTY", "4"),
    ("GLIBTOP_KERN_PROC_UID", "5"),
    ("GLIBTOP_LOADAVG_LAST_PID", "3"),
    ("GLIBTOP_LOADAVG_LOADAVG", "0"),
    ("GLIBTOP_LOADAVG_NR_RUNNING", "1"),
    ("GLIBTOP_LOADAVG_NR_TASKS", "2"),
    ("GLIBTOP_MAP_ENTRY_DEVICE", "5"),
    ("GLIBTOP_MAP_ENTRY_END", "1"),
    ("GLIBTOP_MAP_ENTRY_FILENAME", "6"),
    ("GLIBTOP_MAP_ENTRY_INODE", "4"),
    ("GLIBTOP_MAP_ENTRY_OFFSET", "2"),
    ("GLIBTOP_MAP_ENTRY_PERM", "3"),
    ("GLIBTOP_MAP_ENTRY_PRIVATE_CLEAN", "11"),
    ("GLIBTOP_MAP_ENTRY_PRIVATE_DIRTY", "12"),
    ("GLIBTOP_MAP_ENTRY_PSS", "13"),
    ("GLIBTOP_MAP_ENTRY_RSS", "8"),
    ("GLIBTOP_MAP_ENTRY_SHARED_CLEAN", "9"),
    ("GLIBTOP_MAP_ENTRY_SHARED_DIRTY", "10"),
    ("GLIBTOP_MAP_ENTRY_SIZE", "7"),
    ("GLIBTOP_MAP_ENTRY_START", "0"),
    ("GLIBTOP_MAP_ENTRY_SWAP", "14"),
    ("GLIBTOP_MAP_FILENAME_LEN", "215"),
    ("GLIBTOP_MAP_PERM_EXECUTE", "4"),
    ("GLIBTOP_MAP_PERM_PRIVATE", "16"),
    ("GLIBTOP_MAP_PERM_READ", "1"),
    ("GLIBTOP_MAP_PERM_SHARED", "8"),
    ("GLIBTOP_MAP_PERM_WRITE", "2"),
    ("GLIBTOP_MAX_CMND", "29"),
    ("GLIBTOP_MAX_CPU", "18"),
    ("GLIBTOP_MAX_FSUSAGE", "8"),
    ("GLIBTOP_MAX_GROUPS", "64"),
    ("GLIBTOP_MAX_LOADAVG", "4"),
    ("GLIBTOP_MAX_MAP_ENTRY", "15"),
    ("GLIBTOP_MAX_MEM", "8"),
    ("GLIBTOP_MAX_MOUNTLIST", "3"),
    ("GLIBTOP_MAX_MSG_LIMITS", "7"),
    ("GLIBTOP_MAX_NETLIST", "1"),
    ("GLIBTOP_MAX_NETLOAD", "18"),
    ("GLIBTOP_MAX_OPEN_FILE_ENTRY", "5"),
    ("GLIBTOP_MAX_PPP", "3"),
    ("GLIBTOP_MAX_PROCLIST", "3"),
    ("GLIBTOP_MAX_PROC_AFFINITY", "2"),
    ("GLIBTOP_MAX_PROC_ARGS", "1"),
    ("GLIBTOP_MAX_PROC_IO", "3"),
    ("GLIBTOP_MAX_PROC_KERNEL", "9"),
    ("GLIBTOP_MAX_PROC_MAP", "3"),
    ("GLIBTOP_MAX_PROC_MEM", "6"),
    ("GLIBTOP_MAX_PROC_OPEN_FILES", "3"),
    ("GLIBTOP_MAX_PROC_SEGMENT", "8"),
    ("GLIBTOP_MAX_PROC_SIGNAL", "4"),
    ("GLIBTOP_MAX_PROC_STATE", "9"),
    ("GLIBTOP_MAX_PROC_TIME", "11"),
    ("GLIBTOP_MAX_PROC_UID", "18"),
    ("GLIBTOP_MAX_PROC_WD", "3"),
    ("GLIBTOP_MAX_SEM_LIMITS", "10"),
    ("GLIBTOP_MAX_SHM_LIMITS", "5"),
    ("GLIBTOP_MAX_SWAP", "5"),
    ("GLIBTOP_MAX_SYSDEPS", "28"),
    ("GLIBTOP_MAX_SYSINFO", "2"),
    ("GLIBTOP_MAX_UPTIME", "3"),
    ("GLIBTOP_MEM_BUFFER", "4"),
    ("GLIBTOP_MEM_CACHED", "5"),
    ("GLIBTOP_MEM_FREE", "2"),
    ("GLIBTOP_MEM_LOCKED", "7"),
    ("GLIBTOP_MEM_SHARED", "3"),
    ("GLIBTOP_MEM_TOTAL", "0"),
    ("GLIBTOP_MEM_USED", "1"),
    ("GLIBTOP_MEM_USER", "6"),
    ("GLIBTOP_METHOD_DIRECT", "1"),
    ("GLIBTOP_METHOD_INET", "3"),
    ("GLIBTOP_METHOD_PIPE", "2"),
    ("GLIBTOP_METHOD_UNIX", "4"),
    ("GLIBTOP_MOUNTENTRY_LEN", "79"),
    ("GLIBTOP_MOUNTLIST_NUMBER", "0"),
    ("GLIBTOP_MOUNTLIST_SIZE", "2"),
    ("GLIBTOP_MOUNTLIST_TOTAL", "1"),
    ("GLIBTOP_NCPU", "1024"),
    ("GLIBTOP_NETLIST_NUMBER", "0"),
    ("GLIBTOP_NETLOAD_ADDRESS", "3"),
    ("GLIBTOP_NETLOAD_ADDRESS6", "14"),
    ("GLIBTOP_NETLOAD_BYTES_IN", "7"),
    ("GLIBTOP_NETLOAD_BYTES_OUT", "8"),
    ("GLIBTOP_NETLOAD_BYTES_TOTAL", "9"),
    ("GLIBTOP_NETLOAD_COLLISIONS", "13"),
    ("GLIBTOP_NETLOAD_ERRORS_IN", "10"),
    ("GLIBTOP_NETLOAD_ERRORS_OUT", "11"),
    ("GLIBTOP_NETLOAD_ERRORS_TOTAL", "12"),
    ("GLIBTOP_NETLOAD_HWADDRESS", "17"),
    ("GLIBTOP_NETLOAD_IF_FLAGS", "0"),
    ("GLIBTOP_NETLOAD_MTU", "1"),
    ("GLIBTOP_NETLOAD_PACKETS_IN", "4"),
    ("GLIBTOP_NETLOAD_PACKETS_OUT", "5"),
    ("GLIBTOP_NETLOAD_PACKETS_TOTAL", "6"),
    ("GLIBTOP_NETLOAD_PREFIX6", "15"),
    ("GLIBTOP_NETLOAD_SCOPE6", "16"),
    ("GLIBTOP_NETLOAD_SUBNET", "2"),
    ("GLIBTOP_OPEN_DEST_HOST_LEN", "46"),
    ("GLIBTOP_OPEN_FILENAME_LEN", "215"),
    ("GLIBTOP_PARAM_COMMAND", "3"),
    ("GLIBTOP_PARAM_ERROR_METHOD", "6"),
    ("GLIBTOP_PARAM_FEATURES", "2"),
    ("GLIBTOP_PARAM_HOST", "4"),
    ("GLIBTOP_PARAM_METHOD", "1"),
    ("GLIBTOP_PARAM_PORT", "5"),
    ("GLIBTOP_PARAM_REQUIRED", "7"),
    ("GLIBTOP_PPP_BYTES_IN", "1"),
    ("GLIBTOP_PPP_BYTES_OUT", "2"),
    ("GLIBTOP_PPP_STATE", "0"),
    ("GLIBTOP_PROCESS_DEAD", "64"),
    ("GLIBTOP_PROCESS_INTERRUPTIBLE", "2"),
    ("GLIBTOP_PROCESS_RUNNING", "1"),
    ("GLIBTOP_PROCESS_STOPPED", "16"),
    ("GLIBTOP_PROCESS_SWAPPING", "32"),
    ("GLIBTOP_PROCESS_UNINTERRUPTIBLE", "4"),
    ("GLIBTOP_PROCESS_ZOMBIE", "8"),
    ("GLIBTOP_PROCLIST_NUMBER", "0"),
    ("GLIBTOP_PROCLIST_SIZE", "2"),
    ("GLIBTOP_PROCLIST_TOTAL", "1"),
    ("GLIBTOP_PROC_AFFINITY_ALL", "1"),
    ("GLIBTOP_PROC_AFFINITY_NUMBER", "0"),
    ("GLIBTOP_PROC_ARGS_SIZE", "0"),
    ("GLIBTOP_PROC_IO_DISK_RBYTES", "2"),
    ("GLIBTOP_PROC_IO_DISK_RCHAR", "0"),
    ("GLIBTOP_PROC_IO_DISK_WBYTES", "3"),
    ("GLIBTOP_PROC_IO_DISK_WCHAR", "1"),
    ("GLIBTOP_PROC_KERNEL_CMAJ_FLT", "4"),
    ("GLIBTOP_PROC_KERNEL_CMIN_FLT", "3"),
    ("GLIBTOP_PROC_KERNEL_KSTK_EIP", "6"),
    ("GLIBTOP_PROC_KERNEL_KSTK_ESP", "5"),
    ("GLIBTOP_PROC_KERNEL_K_FLAGS", "0"),
    ("GLIBTOP_PROC_KERNEL_MAJ_FLT", "2"),
    ("GLIBTOP_PROC_KERNEL_MIN_FLT", "1"),
    ("GLIBTOP_PROC_KERNEL_NWCHAN", "7"),
    ("GLIBTOP_PROC_KERNEL_WCHAN", "8"),
    ("GLIBTOP_PROC_MAP_NUMBER", "0"),
    ("GLIBTOP_PROC_MAP_SIZE", "2"),
    ("GLIBTOP_PROC_MAP_TOTAL", "1"),
    ("GLIBTOP_PROC_MEM_RESIDENT", "2"),
    ("GLIBTOP_PROC_MEM_RSS", "4"),
    ("GLIBTOP_PROC_MEM_RSS_RLIM", "5"),
    ("GLIBTOP_PROC_MEM_SHARE", "3"),
    ("GLIBTOP_PROC_MEM_SIZE", "0"),
    ("GLIBTOP_PROC_MEM_VSIZE", "1"),
    ("GLIBTOP_PROC_OPEN_FILES_NUMBER", "0"),
    ("GLIBTOP_PROC_OPEN_FILES_SIZE", "2"),
    ("GLIBTOP_PROC_OPEN_FILES_TOTAL", "1"),
    ("GLIBTOP_PROC_SEGMENT_DATA_RSS", "2"),
    ("GLIBTOP_PROC_SEGMENT_DIRTY_SIZE", "4"),
    ("GLIBTOP_PROC_SEGMENT_END_CODE", "6"),
    ("GLIBTOP_PROC_SEGMENT_SHLIB_RSS", "1"),
    ("GLIBTOP_PROC_SEGMENT_STACK_RSS", "3"),
    ("GLIBTOP_PROC_SEGMENT_START_CODE", "5"),
    ("GLIBTOP_PROC_SEGMENT_START_STACK", "7"),
    ("GLIBTOP_PROC_SEGMENT_TEXT_RSS", "0"),
    ("GLIBTOP_PROC_SIGNAL_BLOCKED", "1"),
    ("GLIBTOP_PROC_SIGNAL_SIGCATCH", "3"),
    ("GLIBTOP_PROC_SIGNAL_SIGIGNORE", "2"),
    ("GLIBTOP_PROC_SIGNAL_SIGNAL", "0"),
    ("GLIBTOP_PROC_STATE_CMD", "0"),
    ("GLIBTOP_PROC_STATE_GID", "3"),
    ("GLIBTOP_PROC_STATE_HAS_CPU", "6"),
    ("GLIBTOP_PROC_STATE_LAST_PROCESSOR", "8"),
    ("GLIBTOP_PROC_STATE_PROCESSOR", "7"),
    ("GLIBTOP_PROC_STATE_RGID", "5"),
    ("GLIBTOP_PROC_STATE_RUID", "4"),
    ("GLIBTOP_PROC_STATE_STATE", "1"),
    ("GLIBTOP_PROC_STATE_UID", "2"),
    ("GLIBTOP_PROC_TIME_CSTIME", "5"),
    ("GLIBTOP_PROC_TIME_CUTIME", "4"),
    ("GLIBTOP_PROC_TIME_FREQUENCY", "8"),
    ("GLIBTOP_PROC_TIME_IT_REAL_VALUE", "7"),
    ("GLIBTOP_PROC_TIME_RTIME", "1"),
    ("GLIBTOP_PROC_TIME_START_TIME", "0"),
    ("GLIBTOP_PROC_TIME_STIME", "3"),
    ("GLIBTOP_PROC_TIME_TIMEOUT", "6"),
    ("GLIBTOP_PROC_TIME_UTIME", "2"),
    ("GLIBTOP_PROC_TIME_XCPU_STIME", "10"),
    ("GLIBTOP_PROC_TIME_XCPU_UTIME", "9"),
    ("GLIBTOP_PROC_UID_EGID", "3"),
    ("GLIBTOP_PROC_UID_EUID", "1"),
    ("GLIBTOP_PROC_UID_FSGID", "7"),
    ("GLIBTOP_PROC_UID_FSUID", "6"),
    ("GLIBTOP_PROC_UID_GID", "2"),
    ("GLIBTOP_PROC_UID_GROUPS", "17"),
    ("GLIBTOP_PROC_UID_NGROUPS", "16"),
    ("GLIBTOP_PROC_UID_NICE", "15"),
    ("GLIBTOP_PROC_UID_PGRP", "10"),
    ("GLIBTOP_PROC_UID_PID", "8"),
    ("GLIBTOP_PROC_UID_PPID", "9"),
    ("GLIBTOP_PROC_UID_PRIORITY", "14"),
    ("GLIBTOP_PROC_UID_SESSION", "11"),
    ("GLIBTOP_PROC_UID_SGID", "5"),
    ("GLIBTOP_PROC_UID_SUID", "4"),
    ("GLIBTOP_PROC_UID_TPGID", "13"),
    ("GLIBTOP_PROC_UID_TTY", "12"),
    ("GLIBTOP_PROC_UID_UID", "0"),
    ("GLIBTOP_PROC_WD_EXE", "2"),
    ("GLIBTOP_PROC_WD_EXE_LEN", "215"),
    ("GLIBTOP_PROC_WD_NUMBER", "0"),
    ("GLIBTOP_PROC_WD_ROOT", "1"),
    ("GLIBTOP_PROC_WD_ROOT_LEN", "215"),
    ("GLIBTOP_SWAP_FREE", "2"),
    ("GLIBTOP_SWAP_PAGEIN", "3"),
    ("GLIBTOP_SWAP_PAGEOUT", "4"),
    ("GLIBTOP_SWAP_TOTAL", "0"),
    ("GLIBTOP_SWAP_USED", "1"),
    ("GLIBTOP_SYSDEPS_ALL", "0"),
    ("GLIBTOP_SYSDEPS_CPU", "1"),
    ("GLIBTOP_SYSDEPS_FEATURES", "0"),
    ("GLIBTOP_SYSDEPS_FSUSAGE", "20"),
    ("GLIBTOP_SYSDEPS_LOADAVG", "5"),
    ("GLIBTOP_SYSDEPS_MEM", "2"),
    ("GLIBTOP_SYSDEPS_MOUNTLIST", "19"),
    ("GLIBTOP_SYSDEPS_MSG_LIMITS", "7"),
    ("GLIBTOP_SYSDEPS_NETLIST", "23"),
    ("GLIBTOP_SYSDEPS_NETLOAD", "21"),
    ("GLIBTOP_SYSDEPS_PPP", "22"),
    ("GLIBTOP_SYSDEPS_PROCLIST", "9"),
    ("GLIBTOP_SYSDEPS_PROC_AFFINITY", "26"),
    ("GLIBTOP_SYSDEPS_PROC_ARGS", "17"),
    ("GLIBTOP_SYSDEPS_PROC_IO", "27"),
    ("GLIBTOP_SYSDEPS_PROC_KERNEL", "15"),
    ("GLIBTOP_SYSDEPS_PROC_MAP", "18"),
    ("GLIBTOP_SYSDEPS_PROC_MEM", "12"),
    ("GLIBTOP_SYSDEPS_PROC_OPEN_FILES", "24"),
    ("GLIBTOP_SYSDEPS_PROC_SEGMENT", "16"),
    ("GLIBTOP_SYSDEPS_PROC_SIGNAL", "14"),
    ("GLIBTOP_SYSDEPS_PROC_STATE", "10"),
    ("GLIBTOP_SYSDEPS_PROC_TIME", "13"),
    ("GLIBTOP_SYSDEPS_PROC_UID", "11"),
    ("GLIBTOP_SYSDEPS_PROC_WD", "25"),
    ("GLIBTOP_SYSDEPS_SEM_LIMITS", "8"),
    ("GLIBTOP_SYSDEPS_SHM_LIMITS", "6"),
    ("GLIBTOP_SYSDEPS_SWAP", "3"),
    ("GLIBTOP_SYSDEPS_UPTIME", "4"),
    ("GLIBTOP_SYSINFO_CPUINFO", "1"),
    ("GLIBTOP_SYSINFO_NCPU", "0"),
    ("GLIBTOP_UPTIME_BOOT_TIME", "2"),
    ("GLIBTOP_UPTIME_IDLETIME", "1"),
    ("GLIBTOP_UPTIME_UPTIME", "0"),
    ("GLIBTOP_XCPU_FLAGS", "11"),
    ("GLIBTOP_XCPU_IDLE", "10"),
    ("GLIBTOP_XCPU_IOWAIT", "15"),
    ("GLIBTOP_XCPU_IRQ", "16"),
    ("GLIBTOP_XCPU_NICE", "8"),
    ("GLIBTOP_XCPU_SOFTIRQ", "17"),
    ("GLIBTOP_XCPU_SYS", "9"),
    ("GLIBTOP_XCPU_TOTAL", "6"),
    ("GLIBTOP_XCPU_USER", "7"),
    ("HOSTNAMSZ", "255"),
    ("LIBGTOP_MAJOR_VERSION", "2"),
    ("LIBGTOP_MICRO_VERSION", "0"),
    ("LIBGTOP_MINOR_VERSION", "40"),
    ("MCOOKIE_NAME", "MAGIC-1"),
    ("MCOOKIE_SCREEN", "42980"),
    ("MCOOKIE_X_NAME", "MIT-MAGIC-COOKIE-1"),
    ("PATCHLEVEL", "2"),
    ("REPLYSIZ", "300"),
    ("TABLE_SIZE", "101"),
    ("TRUE", "1"),
];


