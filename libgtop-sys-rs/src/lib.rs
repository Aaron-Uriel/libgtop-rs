// Generated by gir (https://github.com/gtk-rs/gir @ e0d8d8d645b1)
// from ../gir-files (@ 1c785fc565c4)
// DO NOT EDIT

#![allow(non_camel_case_types, non_upper_case_globals, non_snake_case)]
#![allow(clippy::approx_constant, clippy::type_complexity, clippy::unreadable_literal, clippy::upper_case_acronyms)]
#![cfg_attr(feature = "dox", feature(doc_cfg))]


#[allow(unused_imports)]
use libc::{c_int, c_char, c_uchar, c_float, c_uint, c_double,
    c_short, c_ushort, c_long, c_ulong,
    c_void, size_t, ssize_t, intptr_t, uintptr_t, FILE};

#[allow(unused_imports)]
use glib::{gboolean, gconstpointer, gpointer, GType};

// Constants
pub const AUTH_NAMESZ: c_int = 15;
pub const AUTH_TIMEOUT: c_int = 15;
pub const CONN_INTERNET: c_int = 1;
pub const CONN_IPC: c_int = 2;
pub const CONN_UNIX: c_int = 0;
pub const DEFAULT_PORT: c_int = 21490;
pub const DEFAUTH_NAME: *const c_char = b"GNU-SECURE\0" as *const u8 as *const c_char;
pub const EOT_CHR: c_int = 92;
pub const EOT_STR: *const c_char = b"\0" as *const u8 as *const c_char;
pub const FALSE: c_int = 0;
pub const GLIBTOP_CMND_CPU: c_int = 2;
pub const GLIBTOP_CMND_FSUSAGE: c_int = 21;
pub const GLIBTOP_CMND_LOADAVG: c_int = 6;
pub const GLIBTOP_CMND_MEM: c_int = 3;
pub const GLIBTOP_CMND_MOUNTLIST: c_int = 20;
pub const GLIBTOP_CMND_MSG_LIMITS: c_int = 8;
pub const GLIBTOP_CMND_NETLIST: c_int = 24;
pub const GLIBTOP_CMND_NETLOAD: c_int = 22;
pub const GLIBTOP_CMND_PPP: c_int = 23;
pub const GLIBTOP_CMND_PROCLIST: c_int = 10;
pub const GLIBTOP_CMND_PROC_AFFINITY: c_int = 27;
pub const GLIBTOP_CMND_PROC_ARGS: c_int = 18;
pub const GLIBTOP_CMND_PROC_IO: c_int = 28;
pub const GLIBTOP_CMND_PROC_KERNEL: c_int = 16;
pub const GLIBTOP_CMND_PROC_MAP: c_int = 19;
pub const GLIBTOP_CMND_PROC_MEM: c_int = 13;
pub const GLIBTOP_CMND_PROC_OPEN_FILES: c_int = 25;
pub const GLIBTOP_CMND_PROC_SEGMENT: c_int = 17;
pub const GLIBTOP_CMND_PROC_SIGNAL: c_int = 15;
pub const GLIBTOP_CMND_PROC_STATE: c_int = 11;
pub const GLIBTOP_CMND_PROC_TIME: c_int = 14;
pub const GLIBTOP_CMND_PROC_UID: c_int = 12;
pub const GLIBTOP_CMND_PROC_WD: c_int = 26;
pub const GLIBTOP_CMND_QUIT: c_int = 0;
pub const GLIBTOP_CMND_SEM_LIMITS: c_int = 9;
pub const GLIBTOP_CMND_SHM_LIMITS: c_int = 7;
pub const GLIBTOP_CMND_SWAP: c_int = 4;
pub const GLIBTOP_CMND_SYSDEPS: c_int = 1;
pub const GLIBTOP_CMND_UPTIME: c_int = 5;
pub const GLIBTOP_CPU_FREQUENCY: c_int = 5;
pub const GLIBTOP_CPU_IDLE: c_int = 4;
pub const GLIBTOP_CPU_IOWAIT: c_int = 12;
pub const GLIBTOP_CPU_IRQ: c_int = 13;
pub const GLIBTOP_CPU_NICE: c_int = 2;
pub const GLIBTOP_CPU_SOFTIRQ: c_int = 14;
pub const GLIBTOP_CPU_SYS: c_int = 3;
pub const GLIBTOP_CPU_TOTAL: c_int = 0;
pub const GLIBTOP_CPU_USER: c_int = 1;
pub const GLIBTOP_ERROR_METHOD_ABORT: c_int = 3;
pub const GLIBTOP_ERROR_METHOD_IGNORE: c_int = 0;
pub const GLIBTOP_ERROR_METHOD_WARN: c_int = 2;
pub const GLIBTOP_ERROR_METHOD_WARN_ONCE: c_int = 1;
pub const GLIBTOP_EXCLUDE_IDLE: c_int = 4096;
pub const GLIBTOP_EXCLUDE_NOTTY: c_int = 16384;
pub const GLIBTOP_EXCLUDE_SYSTEM: c_int = 8192;
pub const GLIBTOP_FEATURES_EXCEPT: c_int = 8;
pub const GLIBTOP_FEATURES_NO_SERVER: c_int = 4;
pub const GLIBTOP_FILE_ENTRY_FD: c_int = 0;
pub const GLIBTOP_FILE_ENTRY_INETSOCKET_DST_HOST: c_int = 3;
pub const GLIBTOP_FILE_ENTRY_INETSOCKET_DST_PORT: c_int = 4;
pub const GLIBTOP_FILE_ENTRY_NAME: c_int = 1;
pub const GLIBTOP_FILE_ENTRY_TYPE: c_int = 2;
pub const GLIBTOP_FSUSAGE_BAVAIL: c_int = 2;
pub const GLIBTOP_FSUSAGE_BFREE: c_int = 1;
pub const GLIBTOP_FSUSAGE_BLOCKS: c_int = 0;
pub const GLIBTOP_FSUSAGE_BLOCK_SIZE: c_int = 5;
pub const GLIBTOP_FSUSAGE_FFREE: c_int = 4;
pub const GLIBTOP_FSUSAGE_FILES: c_int = 3;
pub const GLIBTOP_FSUSAGE_READ: c_int = 6;
pub const GLIBTOP_FSUSAGE_WRITE: c_int = 7;
pub const GLIBTOP_INIT_NO_INIT: c_int = 2;
pub const GLIBTOP_INIT_NO_OPEN: c_int = 1;
pub const GLIBTOP_IPC_MSGMAP: c_int = 1;
pub const GLIBTOP_IPC_MSGMAX: c_int = 2;
pub const GLIBTOP_IPC_MSGMNB: c_int = 3;
pub const GLIBTOP_IPC_MSGMNI: c_int = 4;
pub const GLIBTOP_IPC_MSGPOOL: c_int = 0;
pub const GLIBTOP_IPC_MSGSSZ: c_int = 5;
pub const GLIBTOP_IPC_MSGTQL: c_int = 6;
pub const GLIBTOP_IPC_SEMAEM: c_int = 9;
pub const GLIBTOP_IPC_SEMMAP: c_int = 0;
pub const GLIBTOP_IPC_SEMMNI: c_int = 1;
pub const GLIBTOP_IPC_SEMMNS: c_int = 2;
pub const GLIBTOP_IPC_SEMMNU: c_int = 3;
pub const GLIBTOP_IPC_SEMMSL: c_int = 4;
pub const GLIBTOP_IPC_SEMOPM: c_int = 5;
pub const GLIBTOP_IPC_SEMUME: c_int = 6;
pub const GLIBTOP_IPC_SEMUSZ: c_int = 7;
pub const GLIBTOP_IPC_SEMVMX: c_int = 8;
pub const GLIBTOP_IPC_SHMALL: c_int = 4;
pub const GLIBTOP_IPC_SHMMAX: c_int = 0;
pub const GLIBTOP_IPC_SHMMIN: c_int = 1;
pub const GLIBTOP_IPC_SHMMNI: c_int = 2;
pub const GLIBTOP_IPC_SHMSEG: c_int = 3;
pub const GLIBTOP_KERN_PROC_ALL: c_int = 0;
pub const GLIBTOP_KERN_PROC_MASK: c_int = 15;
pub const GLIBTOP_KERN_PROC_PGRP: c_int = 2;
pub const GLIBTOP_KERN_PROC_PID: c_int = 1;
pub const GLIBTOP_KERN_PROC_RUID: c_int = 6;
pub const GLIBTOP_KERN_PROC_SESSION: c_int = 3;
pub const GLIBTOP_KERN_PROC_TTY: c_int = 4;
pub const GLIBTOP_KERN_PROC_UID: c_int = 5;
pub const GLIBTOP_LOADAVG_LAST_PID: c_int = 3;
pub const GLIBTOP_LOADAVG_LOADAVG: c_int = 0;
pub const GLIBTOP_LOADAVG_NR_RUNNING: c_int = 1;
pub const GLIBTOP_LOADAVG_NR_TASKS: c_int = 2;
pub const GLIBTOP_MAP_ENTRY_DEVICE: c_int = 5;
pub const GLIBTOP_MAP_ENTRY_END: c_int = 1;
pub const GLIBTOP_MAP_ENTRY_FILENAME: c_int = 6;
pub const GLIBTOP_MAP_ENTRY_INODE: c_int = 4;
pub const GLIBTOP_MAP_ENTRY_OFFSET: c_int = 2;
pub const GLIBTOP_MAP_ENTRY_PERM: c_int = 3;
pub const GLIBTOP_MAP_ENTRY_PRIVATE_CLEAN: c_int = 11;
pub const GLIBTOP_MAP_ENTRY_PRIVATE_DIRTY: c_int = 12;
pub const GLIBTOP_MAP_ENTRY_PSS: c_int = 13;
pub const GLIBTOP_MAP_ENTRY_RSS: c_int = 8;
pub const GLIBTOP_MAP_ENTRY_SHARED_CLEAN: c_int = 9;
pub const GLIBTOP_MAP_ENTRY_SHARED_DIRTY: c_int = 10;
pub const GLIBTOP_MAP_ENTRY_SIZE: c_int = 7;
pub const GLIBTOP_MAP_ENTRY_START: c_int = 0;
pub const GLIBTOP_MAP_ENTRY_SWAP: c_int = 14;
pub const GLIBTOP_MAP_FILENAME_LEN: c_int = 215;
pub const GLIBTOP_MAP_PERM_EXECUTE: c_int = 4;
pub const GLIBTOP_MAP_PERM_PRIVATE: c_int = 16;
pub const GLIBTOP_MAP_PERM_READ: c_int = 1;
pub const GLIBTOP_MAP_PERM_SHARED: c_int = 8;
pub const GLIBTOP_MAP_PERM_WRITE: c_int = 2;
pub const GLIBTOP_MAX_CMND: c_int = 29;
pub const GLIBTOP_MAX_CPU: c_int = 18;
pub const GLIBTOP_MAX_FSUSAGE: c_int = 8;
pub const GLIBTOP_MAX_GROUPS: c_int = 64;
pub const GLIBTOP_MAX_LOADAVG: c_int = 4;
pub const GLIBTOP_MAX_MAP_ENTRY: c_int = 15;
pub const GLIBTOP_MAX_MEM: c_int = 8;
pub const GLIBTOP_MAX_MOUNTLIST: c_int = 3;
pub const GLIBTOP_MAX_MSG_LIMITS: c_int = 7;
pub const GLIBTOP_MAX_NETLIST: c_int = 1;
pub const GLIBTOP_MAX_NETLOAD: c_int = 18;
pub const GLIBTOP_MAX_OPEN_FILE_ENTRY: c_int = 5;
pub const GLIBTOP_MAX_PPP: c_int = 3;
pub const GLIBTOP_MAX_PROCLIST: c_int = 3;
pub const GLIBTOP_MAX_PROC_AFFINITY: c_int = 2;
pub const GLIBTOP_MAX_PROC_ARGS: c_int = 1;
pub const GLIBTOP_MAX_PROC_IO: c_int = 3;
pub const GLIBTOP_MAX_PROC_KERNEL: c_int = 9;
pub const GLIBTOP_MAX_PROC_MAP: c_int = 3;
pub const GLIBTOP_MAX_PROC_MEM: c_int = 6;
pub const GLIBTOP_MAX_PROC_OPEN_FILES: c_int = 3;
pub const GLIBTOP_MAX_PROC_SEGMENT: c_int = 8;
pub const GLIBTOP_MAX_PROC_SIGNAL: c_int = 4;
pub const GLIBTOP_MAX_PROC_STATE: c_int = 9;
pub const GLIBTOP_MAX_PROC_TIME: c_int = 11;
pub const GLIBTOP_MAX_PROC_UID: c_int = 18;
pub const GLIBTOP_MAX_PROC_WD: c_int = 3;
pub const GLIBTOP_MAX_SEM_LIMITS: c_int = 10;
pub const GLIBTOP_MAX_SHM_LIMITS: c_int = 5;
pub const GLIBTOP_MAX_SWAP: c_int = 5;
pub const GLIBTOP_MAX_SYSDEPS: c_int = 28;
pub const GLIBTOP_MAX_SYSINFO: c_int = 2;
pub const GLIBTOP_MAX_UPTIME: c_int = 3;
pub const GLIBTOP_MEM_BUFFER: c_int = 4;
pub const GLIBTOP_MEM_CACHED: c_int = 5;
pub const GLIBTOP_MEM_FREE: c_int = 2;
pub const GLIBTOP_MEM_LOCKED: c_int = 7;
pub const GLIBTOP_MEM_SHARED: c_int = 3;
pub const GLIBTOP_MEM_TOTAL: c_int = 0;
pub const GLIBTOP_MEM_USED: c_int = 1;
pub const GLIBTOP_MEM_USER: c_int = 6;
pub const GLIBTOP_METHOD_DIRECT: c_int = 1;
pub const GLIBTOP_METHOD_INET: c_int = 3;
pub const GLIBTOP_METHOD_PIPE: c_int = 2;
pub const GLIBTOP_METHOD_UNIX: c_int = 4;
pub const GLIBTOP_MOUNTENTRY_LEN: c_int = 79;
pub const GLIBTOP_MOUNTLIST_NUMBER: c_int = 0;
pub const GLIBTOP_MOUNTLIST_SIZE: c_int = 2;
pub const GLIBTOP_MOUNTLIST_TOTAL: c_int = 1;
pub const GLIBTOP_NCPU: c_int = 1024;
pub const GLIBTOP_NETLIST_NUMBER: c_int = 0;
pub const GLIBTOP_NETLOAD_ADDRESS: c_int = 3;
pub const GLIBTOP_NETLOAD_ADDRESS6: c_int = 14;
pub const GLIBTOP_NETLOAD_BYTES_IN: c_int = 7;
pub const GLIBTOP_NETLOAD_BYTES_OUT: c_int = 8;
pub const GLIBTOP_NETLOAD_BYTES_TOTAL: c_int = 9;
pub const GLIBTOP_NETLOAD_COLLISIONS: c_int = 13;
pub const GLIBTOP_NETLOAD_ERRORS_IN: c_int = 10;
pub const GLIBTOP_NETLOAD_ERRORS_OUT: c_int = 11;
pub const GLIBTOP_NETLOAD_ERRORS_TOTAL: c_int = 12;
pub const GLIBTOP_NETLOAD_HWADDRESS: c_int = 17;
pub const GLIBTOP_NETLOAD_IF_FLAGS: c_int = 0;
pub const GLIBTOP_NETLOAD_MTU: c_int = 1;
pub const GLIBTOP_NETLOAD_PACKETS_IN: c_int = 4;
pub const GLIBTOP_NETLOAD_PACKETS_OUT: c_int = 5;
pub const GLIBTOP_NETLOAD_PACKETS_TOTAL: c_int = 6;
pub const GLIBTOP_NETLOAD_PREFIX6: c_int = 15;
pub const GLIBTOP_NETLOAD_SCOPE6: c_int = 16;
pub const GLIBTOP_NETLOAD_SUBNET: c_int = 2;
pub const GLIBTOP_OPEN_DEST_HOST_LEN: c_int = 46;
pub const GLIBTOP_OPEN_FILENAME_LEN: c_int = 215;
pub const GLIBTOP_PARAM_COMMAND: c_int = 3;
pub const GLIBTOP_PARAM_ERROR_METHOD: c_int = 6;
pub const GLIBTOP_PARAM_FEATURES: c_int = 2;
pub const GLIBTOP_PARAM_HOST: c_int = 4;
pub const GLIBTOP_PARAM_METHOD: c_int = 1;
pub const GLIBTOP_PARAM_PORT: c_int = 5;
pub const GLIBTOP_PARAM_REQUIRED: c_int = 7;
pub const GLIBTOP_PPP_BYTES_IN: c_int = 1;
pub const GLIBTOP_PPP_BYTES_OUT: c_int = 2;
pub const GLIBTOP_PPP_STATE: c_int = 0;
pub const GLIBTOP_PROCESS_DEAD: c_int = 64;
pub const GLIBTOP_PROCESS_INTERRUPTIBLE: c_int = 2;
pub const GLIBTOP_PROCESS_RUNNING: c_int = 1;
pub const GLIBTOP_PROCESS_STOPPED: c_int = 16;
pub const GLIBTOP_PROCESS_SWAPPING: c_int = 32;
pub const GLIBTOP_PROCESS_UNINTERRUPTIBLE: c_int = 4;
pub const GLIBTOP_PROCESS_ZOMBIE: c_int = 8;
pub const GLIBTOP_PROCLIST_NUMBER: c_int = 0;
pub const GLIBTOP_PROCLIST_SIZE: c_int = 2;
pub const GLIBTOP_PROCLIST_TOTAL: c_int = 1;
pub const GLIBTOP_PROC_AFFINITY_ALL: c_int = 1;
pub const GLIBTOP_PROC_AFFINITY_NUMBER: c_int = 0;
pub const GLIBTOP_PROC_ARGS_SIZE: c_int = 0;
pub const GLIBTOP_PROC_IO_DISK_RBYTES: c_int = 2;
pub const GLIBTOP_PROC_IO_DISK_RCHAR: c_int = 0;
pub const GLIBTOP_PROC_IO_DISK_WBYTES: c_int = 3;
pub const GLIBTOP_PROC_IO_DISK_WCHAR: c_int = 1;
pub const GLIBTOP_PROC_KERNEL_CMAJ_FLT: c_int = 4;
pub const GLIBTOP_PROC_KERNEL_CMIN_FLT: c_int = 3;
pub const GLIBTOP_PROC_KERNEL_KSTK_EIP: c_int = 6;
pub const GLIBTOP_PROC_KERNEL_KSTK_ESP: c_int = 5;
pub const GLIBTOP_PROC_KERNEL_K_FLAGS: c_int = 0;
pub const GLIBTOP_PROC_KERNEL_MAJ_FLT: c_int = 2;
pub const GLIBTOP_PROC_KERNEL_MIN_FLT: c_int = 1;
pub const GLIBTOP_PROC_KERNEL_NWCHAN: c_int = 7;
pub const GLIBTOP_PROC_KERNEL_WCHAN: c_int = 8;
pub const GLIBTOP_PROC_MAP_NUMBER: c_int = 0;
pub const GLIBTOP_PROC_MAP_SIZE: c_int = 2;
pub const GLIBTOP_PROC_MAP_TOTAL: c_int = 1;
pub const GLIBTOP_PROC_MEM_RESIDENT: c_int = 2;
pub const GLIBTOP_PROC_MEM_RSS: c_int = 4;
pub const GLIBTOP_PROC_MEM_RSS_RLIM: c_int = 5;
pub const GLIBTOP_PROC_MEM_SHARE: c_int = 3;
pub const GLIBTOP_PROC_MEM_SIZE: c_int = 0;
pub const GLIBTOP_PROC_MEM_VSIZE: c_int = 1;
pub const GLIBTOP_PROC_OPEN_FILES_NUMBER: c_int = 0;
pub const GLIBTOP_PROC_OPEN_FILES_SIZE: c_int = 2;
pub const GLIBTOP_PROC_OPEN_FILES_TOTAL: c_int = 1;
pub const GLIBTOP_PROC_SEGMENT_DATA_RSS: c_int = 2;
pub const GLIBTOP_PROC_SEGMENT_DIRTY_SIZE: c_int = 4;
pub const GLIBTOP_PROC_SEGMENT_END_CODE: c_int = 6;
pub const GLIBTOP_PROC_SEGMENT_SHLIB_RSS: c_int = 1;
pub const GLIBTOP_PROC_SEGMENT_STACK_RSS: c_int = 3;
pub const GLIBTOP_PROC_SEGMENT_START_CODE: c_int = 5;
pub const GLIBTOP_PROC_SEGMENT_START_STACK: c_int = 7;
pub const GLIBTOP_PROC_SEGMENT_TEXT_RSS: c_int = 0;
pub const GLIBTOP_PROC_SIGNAL_BLOCKED: c_int = 1;
pub const GLIBTOP_PROC_SIGNAL_SIGCATCH: c_int = 3;
pub const GLIBTOP_PROC_SIGNAL_SIGIGNORE: c_int = 2;
pub const GLIBTOP_PROC_SIGNAL_SIGNAL: c_int = 0;
pub const GLIBTOP_PROC_STATE_CMD: c_int = 0;
pub const GLIBTOP_PROC_STATE_GID: c_int = 3;
pub const GLIBTOP_PROC_STATE_HAS_CPU: c_int = 6;
pub const GLIBTOP_PROC_STATE_LAST_PROCESSOR: c_int = 8;
pub const GLIBTOP_PROC_STATE_PROCESSOR: c_int = 7;
pub const GLIBTOP_PROC_STATE_RGID: c_int = 5;
pub const GLIBTOP_PROC_STATE_RUID: c_int = 4;
pub const GLIBTOP_PROC_STATE_STATE: c_int = 1;
pub const GLIBTOP_PROC_STATE_UID: c_int = 2;
pub const GLIBTOP_PROC_TIME_CSTIME: c_int = 5;
pub const GLIBTOP_PROC_TIME_CUTIME: c_int = 4;
pub const GLIBTOP_PROC_TIME_FREQUENCY: c_int = 8;
pub const GLIBTOP_PROC_TIME_IT_REAL_VALUE: c_int = 7;
pub const GLIBTOP_PROC_TIME_RTIME: c_int = 1;
pub const GLIBTOP_PROC_TIME_START_TIME: c_int = 0;
pub const GLIBTOP_PROC_TIME_STIME: c_int = 3;
pub const GLIBTOP_PROC_TIME_TIMEOUT: c_int = 6;
pub const GLIBTOP_PROC_TIME_UTIME: c_int = 2;
pub const GLIBTOP_PROC_TIME_XCPU_STIME: c_int = 10;
pub const GLIBTOP_PROC_TIME_XCPU_UTIME: c_int = 9;
pub const GLIBTOP_PROC_UID_EGID: c_int = 3;
pub const GLIBTOP_PROC_UID_EUID: c_int = 1;
pub const GLIBTOP_PROC_UID_FSGID: c_int = 7;
pub const GLIBTOP_PROC_UID_FSUID: c_int = 6;
pub const GLIBTOP_PROC_UID_GID: c_int = 2;
pub const GLIBTOP_PROC_UID_GROUPS: c_int = 17;
pub const GLIBTOP_PROC_UID_NGROUPS: c_int = 16;
pub const GLIBTOP_PROC_UID_NICE: c_int = 15;
pub const GLIBTOP_PROC_UID_PGRP: c_int = 10;
pub const GLIBTOP_PROC_UID_PID: c_int = 8;
pub const GLIBTOP_PROC_UID_PPID: c_int = 9;
pub const GLIBTOP_PROC_UID_PRIORITY: c_int = 14;
pub const GLIBTOP_PROC_UID_SESSION: c_int = 11;
pub const GLIBTOP_PROC_UID_SGID: c_int = 5;
pub const GLIBTOP_PROC_UID_SUID: c_int = 4;
pub const GLIBTOP_PROC_UID_TPGID: c_int = 13;
pub const GLIBTOP_PROC_UID_TTY: c_int = 12;
pub const GLIBTOP_PROC_UID_UID: c_int = 0;
pub const GLIBTOP_PROC_WD_EXE: c_int = 2;
pub const GLIBTOP_PROC_WD_EXE_LEN: c_int = 215;
pub const GLIBTOP_PROC_WD_NUMBER: c_int = 0;
pub const GLIBTOP_PROC_WD_ROOT: c_int = 1;
pub const GLIBTOP_PROC_WD_ROOT_LEN: c_int = 215;
pub const GLIBTOP_SWAP_FREE: c_int = 2;
pub const GLIBTOP_SWAP_PAGEIN: c_int = 3;
pub const GLIBTOP_SWAP_PAGEOUT: c_int = 4;
pub const GLIBTOP_SWAP_TOTAL: c_int = 0;
pub const GLIBTOP_SWAP_USED: c_int = 1;
pub const GLIBTOP_SYSDEPS_ALL: c_int = 0;
pub const GLIBTOP_SYSDEPS_CPU: c_int = 1;
pub const GLIBTOP_SYSDEPS_FEATURES: c_int = 0;
pub const GLIBTOP_SYSDEPS_FSUSAGE: c_int = 20;
pub const GLIBTOP_SYSDEPS_LOADAVG: c_int = 5;
pub const GLIBTOP_SYSDEPS_MEM: c_int = 2;
pub const GLIBTOP_SYSDEPS_MOUNTLIST: c_int = 19;
pub const GLIBTOP_SYSDEPS_MSG_LIMITS: c_int = 7;
pub const GLIBTOP_SYSDEPS_NETLIST: c_int = 23;
pub const GLIBTOP_SYSDEPS_NETLOAD: c_int = 21;
pub const GLIBTOP_SYSDEPS_PPP: c_int = 22;
pub const GLIBTOP_SYSDEPS_PROCLIST: c_int = 9;
pub const GLIBTOP_SYSDEPS_PROC_AFFINITY: c_int = 26;
pub const GLIBTOP_SYSDEPS_PROC_ARGS: c_int = 17;
pub const GLIBTOP_SYSDEPS_PROC_IO: c_int = 27;
pub const GLIBTOP_SYSDEPS_PROC_KERNEL: c_int = 15;
pub const GLIBTOP_SYSDEPS_PROC_MAP: c_int = 18;
pub const GLIBTOP_SYSDEPS_PROC_MEM: c_int = 12;
pub const GLIBTOP_SYSDEPS_PROC_OPEN_FILES: c_int = 24;
pub const GLIBTOP_SYSDEPS_PROC_SEGMENT: c_int = 16;
pub const GLIBTOP_SYSDEPS_PROC_SIGNAL: c_int = 14;
pub const GLIBTOP_SYSDEPS_PROC_STATE: c_int = 10;
pub const GLIBTOP_SYSDEPS_PROC_TIME: c_int = 13;
pub const GLIBTOP_SYSDEPS_PROC_UID: c_int = 11;
pub const GLIBTOP_SYSDEPS_PROC_WD: c_int = 25;
pub const GLIBTOP_SYSDEPS_SEM_LIMITS: c_int = 8;
pub const GLIBTOP_SYSDEPS_SHM_LIMITS: c_int = 6;
pub const GLIBTOP_SYSDEPS_SWAP: c_int = 3;
pub const GLIBTOP_SYSDEPS_UPTIME: c_int = 4;
pub const GLIBTOP_SYSINFO_CPUINFO: c_int = 1;
pub const GLIBTOP_SYSINFO_NCPU: c_int = 0;
pub const GLIBTOP_UPTIME_BOOT_TIME: c_int = 2;
pub const GLIBTOP_UPTIME_IDLETIME: c_int = 1;
pub const GLIBTOP_UPTIME_UPTIME: c_int = 0;
pub const GLIBTOP_XCPU_FLAGS: c_int = 11;
pub const GLIBTOP_XCPU_IDLE: c_int = 10;
pub const GLIBTOP_XCPU_IOWAIT: c_int = 15;
pub const GLIBTOP_XCPU_IRQ: c_int = 16;
pub const GLIBTOP_XCPU_NICE: c_int = 8;
pub const GLIBTOP_XCPU_SOFTIRQ: c_int = 17;
pub const GLIBTOP_XCPU_SYS: c_int = 9;
pub const GLIBTOP_XCPU_TOTAL: c_int = 6;
pub const GLIBTOP_XCPU_USER: c_int = 7;
pub const HOSTNAMSZ: c_int = 255;
pub const LIBGTOP_MAJOR_VERSION: c_int = 2;
pub const LIBGTOP_MICRO_VERSION: c_int = 0;
pub const LIBGTOP_MINOR_VERSION: c_int = 40;
pub const MCOOKIE_NAME: *const c_char = b"MAGIC-1\0" as *const u8 as *const c_char;
pub const MCOOKIE_SCREEN: *const c_char = b"42980\0" as *const u8 as *const c_char;
pub const MCOOKIE_X_NAME: *const c_char = b"MIT-MAGIC-COOKIE-1\0" as *const u8 as *const c_char;
pub const PATCHLEVEL: c_int = 2;
pub const REPLYSIZ: c_int = 300;
pub const TABLE_SIZE: c_int = 101;
pub const TRUE: c_int = 1;

// Unions
#[derive(Copy, Clone)]
#[repr(C)]
pub union glibtop_open_files_entry_info {
    pub sock: glibtop_open_files_entry_info_sock,
    _truncated_record_marker: glibtop_open_files_entry_info_localsock,
    // /*Metadata mismatch*/[c:type mismatch `glibtop_open_files_entry_info_file` != `glibtop_open_files_entry_info_localsock` of `glibtop_open_files_entry_info_localsock`]
}

impl ::std::fmt::Debug for glibtop_open_files_entry_info {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_open_files_entry_info @ {:p}", self))
         .field("sock", unsafe { &self.sock })
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub union glibtop_response_union {
    pub data: glibtop_union,
    pub sysdeps: glibtop_sysdeps,
}

impl ::std::fmt::Debug for glibtop_response_union {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_response_union @ {:p}", self))
         .field("data", unsafe { &self.data })
         .field("sysdeps", unsafe { &self.sysdeps })
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub union glibtop_union {
    pub cpu: glibtop_cpu,
    pub mem: glibtop_mem,
    pub swap: glibtop_swap,
    pub uptime: glibtop_uptime,
    pub loadavg: glibtop_loadavg,
    pub shm_limits: glibtop_shm_limits,
    pub msg_limits: glibtop_msg_limits,
    pub sem_limits: glibtop_sem_limits,
    pub proclist: glibtop_proclist,
    pub proc_state: glibtop_proc_state,
    pub proc_uid: glibtop_proc_uid,
    pub proc_mem: glibtop_proc_mem,
    pub proc_time: glibtop_proc_time,
    pub proc_signal: glibtop_proc_signal,
    pub proc_kernel: glibtop_proc_kernel,
    pub proc_segment: glibtop_proc_segment,
    pub proc_args: glibtop_proc_args,
    pub proc_map: glibtop_proc_map,
    pub mountlist: glibtop_mountlist,
    pub fsusage: glibtop_fsusage,
    pub netlist: glibtop_netlist,
    pub netload: glibtop_netload,
    pub ppp: glibtop_ppp,
    pub proc_open_files: glibtop_proc_open_files,
    pub proc_wd: glibtop_proc_wd,
    pub proc_affinity: glibtop_proc_affinity,
    pub proc_io: glibtop_proc_io,
}

impl ::std::fmt::Debug for glibtop_union {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_union @ {:p}", self))
         .field("cpu", unsafe { &self.cpu })
         .field("mem", unsafe { &self.mem })
         .field("swap", unsafe { &self.swap })
         .field("uptime", unsafe { &self.uptime })
         .field("loadavg", unsafe { &self.loadavg })
         .field("shm_limits", unsafe { &self.shm_limits })
         .field("msg_limits", unsafe { &self.msg_limits })
         .field("sem_limits", unsafe { &self.sem_limits })
         .field("proclist", unsafe { &self.proclist })
         .field("proc_state", unsafe { &self.proc_state })
         .field("proc_uid", unsafe { &self.proc_uid })
         .field("proc_mem", unsafe { &self.proc_mem })
         .field("proc_time", unsafe { &self.proc_time })
         .field("proc_signal", unsafe { &self.proc_signal })
         .field("proc_kernel", unsafe { &self.proc_kernel })
         .field("proc_segment", unsafe { &self.proc_segment })
         .field("proc_args", unsafe { &self.proc_args })
         .field("proc_map", unsafe { &self.proc_map })
         .field("mountlist", unsafe { &self.mountlist })
         .field("fsusage", unsafe { &self.fsusage })
         .field("netlist", unsafe { &self.netlist })
         .field("netload", unsafe { &self.netload })
         .field("ppp", unsafe { &self.ppp })
         .field("proc_open_files", unsafe { &self.proc_open_files })
         .field("proc_wd", unsafe { &self.proc_wd })
         .field("proc_affinity", unsafe { &self.proc_affinity })
         .field("proc_io", unsafe { &self.proc_io })
         .finish()
    }
}

// Records
#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop {
    pub flags: c_uint,
    pub method: c_uint,
    pub error_method: c_uint,
    pub input: [c_int; 2],
    pub output: [c_int; 2],
    pub socket: c_int,
    pub ncpu: c_int,
    pub real_ncpu: c_int,
    pub os_version_code: c_ulong,
    pub name: *const c_char,
    pub server_command: *const c_char,
    pub server_host: *const c_char,
    pub server_user: *const c_char,
    pub server_rsh: *const c_char,
    pub features: c_ulong,
    pub server_port: c_ulong,
    pub sysdeps: glibtop_sysdeps,
    pub required: glibtop_sysdeps,
    pub pid: c_int,
    pub uid: c_uint,
    pub euid: c_uint,
    pub gid: c_uint,
    pub egid: c_uint,
    pub machine: *mut glibtop_machine,
}

impl ::std::fmt::Debug for glibtop {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop @ {:p}", self))
         .field("flags", &self.flags)
         .field("method", &self.method)
         .field("error_method", &self.error_method)
         .field("input", &self.input)
         .field("output", &self.output)
         .field("socket", &self.socket)
         .field("ncpu", &self.ncpu)
         .field("real_ncpu", &self.real_ncpu)
         .field("os_version_code", &self.os_version_code)
         .field("name", &self.name)
         .field("server_command", &self.server_command)
         .field("server_host", &self.server_host)
         .field("server_user", &self.server_user)
         .field("server_rsh", &self.server_rsh)
         .field("features", &self.features)
         .field("server_port", &self.server_port)
         .field("sysdeps", &self.sysdeps)
         .field("required", &self.required)
         .field("pid", &self.pid)
         .field("uid", &self.uid)
         .field("euid", &self.euid)
         .field("gid", &self.gid)
         .field("egid", &self.egid)
         .field("machine", &self.machine)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_command {
    pub command: u64,
    pub size: u64,
    pub data_size: u64,
    pub parameter: [c_char; 16],
}

impl ::std::fmt::Debug for glibtop_command {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_command @ {:p}", self))
         .field("command", &self.command)
         .field("size", &self.size)
         .field("data_size", &self.data_size)
         .field("parameter", &self.parameter)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_cpu {
    pub flags: u64,
    pub total: u64,
    pub user: u64,
    pub nice: u64,
    pub sys: u64,
    pub idle: u64,
    pub iowait: u64,
    pub irq: u64,
    pub softirq: u64,
    pub frequency: u64,
    pub xcpu_total: [u64; 1024],
    pub xcpu_user: [u64; 1024],
    pub xcpu_nice: [u64; 1024],
    pub xcpu_sys: [u64; 1024],
    pub xcpu_idle: [u64; 1024],
    pub xcpu_iowait: [u64; 1024],
    pub xcpu_irq: [u64; 1024],
    pub xcpu_softirq: [u64; 1024],
    pub xcpu_flags: u64,
}

impl ::std::fmt::Debug for glibtop_cpu {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_cpu @ {:p}", self))
         .field("flags", &self.flags)
         .field("total", &self.total)
         .field("user", &self.user)
         .field("nice", &self.nice)
         .field("sys", &self.sys)
         .field("idle", &self.idle)
         .field("iowait", &self.iowait)
         .field("irq", &self.irq)
         .field("softirq", &self.softirq)
         .field("frequency", &self.frequency)
         .field("xcpu_flags", &self.xcpu_flags)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_entry {
    pub labels: *mut glib::GPtrArray,
    pub values: *mut glib::GHashTable,
    pub descriptions: *mut glib::GHashTable,
}

impl ::std::fmt::Debug for glibtop_entry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_entry @ {:p}", self))
         .field("labels", &self.labels)
         .field("values", &self.values)
         .field("descriptions", &self.descriptions)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_fsusage {
    pub flags: u64,
    pub blocks: u64,
    pub bfree: u64,
    pub bavail: u64,
    pub files: u64,
    pub ffree: u64,
    pub block_size: u32,
    pub read: u64,
    pub write: u64,
}

impl ::std::fmt::Debug for glibtop_fsusage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_fsusage @ {:p}", self))
         .field("flags", &self.flags)
         .field("blocks", &self.blocks)
         .field("bfree", &self.bfree)
         .field("bavail", &self.bavail)
         .field("files", &self.files)
         .field("ffree", &self.ffree)
         .field("block_size", &self.block_size)
         .field("read", &self.read)
         .field("write", &self.write)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_loadavg {
    pub flags: u64,
    pub loadavg: [c_double; 3],
    pub nr_running: u64,
    pub nr_tasks: u64,
    pub last_pid: u64,
}

impl ::std::fmt::Debug for glibtop_loadavg {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_loadavg @ {:p}", self))
         .field("flags", &self.flags)
         .field("loadavg", &self.loadavg)
         .field("nr_running", &self.nr_running)
         .field("nr_tasks", &self.nr_tasks)
         .field("last_pid", &self.last_pid)
         .finish()
    }
}

#[repr(C)]
pub struct _glibtop_machine {
    _data: [u8; 0],
    _marker: core::marker::PhantomData<(*mut u8, core::marker::PhantomPinned)>,
}

pub type glibtop_machine = *mut _glibtop_machine;

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_map_entry {
    pub flags: u64,
    pub start: u64,
    pub end: u64,
    pub offset: u64,
    pub perm: u64,
    pub inode: u64,
    pub device: u64,
    pub size: u64,
    pub rss: u64,
    pub shared_clean: u64,
    pub shared_dirty: u64,
    pub private_clean: u64,
    pub private_dirty: u64,
    pub pss: u64,
    pub swap: u64,
    pub filename: [c_char; 216],
}

impl ::std::fmt::Debug for glibtop_map_entry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_map_entry @ {:p}", self))
         .field("flags", &self.flags)
         .field("start", &self.start)
         .field("end", &self.end)
         .field("offset", &self.offset)
         .field("perm", &self.perm)
         .field("inode", &self.inode)
         .field("device", &self.device)
         .field("size", &self.size)
         .field("rss", &self.rss)
         .field("shared_clean", &self.shared_clean)
         .field("shared_dirty", &self.shared_dirty)
         .field("private_clean", &self.private_clean)
         .field("private_dirty", &self.private_dirty)
         .field("pss", &self.pss)
         .field("swap", &self.swap)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_mem {
    pub flags: u64,
    pub total: u64,
    pub used: u64,
    pub free: u64,
    pub shared: u64,
    pub buffer: u64,
    pub cached: u64,
    pub user: u64,
    pub locked: u64,
}

impl ::std::fmt::Debug for glibtop_mem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_mem @ {:p}", self))
         .field("flags", &self.flags)
         .field("total", &self.total)
         .field("used", &self.used)
         .field("free", &self.free)
         .field("shared", &self.shared)
         .field("buffer", &self.buffer)
         .field("cached", &self.cached)
         .field("user", &self.user)
         .field("locked", &self.locked)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_mountentry {
    pub dev: u64,
    pub devname: [c_char; 80],
    pub mountdir: [c_char; 80],
    pub type_: [c_char; 80],
}

impl ::std::fmt::Debug for glibtop_mountentry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_mountentry @ {:p}", self))
         .field("dev", &self.dev)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_mountlist {
    pub flags: u64,
    pub number: u64,
    pub total: u64,
    pub size: u64,
}

impl ::std::fmt::Debug for glibtop_mountlist {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_mountlist @ {:p}", self))
         .field("flags", &self.flags)
         .field("number", &self.number)
         .field("total", &self.total)
         .field("size", &self.size)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_msg_limits {
    pub flags: u64,
    pub msgpool: u64,
    pub msgmap: u64,
    pub msgmax: u64,
    pub msgmnb: u64,
    pub msgmni: u64,
    pub msgssz: u64,
    pub msgtql: u64,
}

impl ::std::fmt::Debug for glibtop_msg_limits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_msg_limits @ {:p}", self))
         .field("flags", &self.flags)
         .field("msgpool", &self.msgpool)
         .field("msgmap", &self.msgmap)
         .field("msgmax", &self.msgmax)
         .field("msgmnb", &self.msgmnb)
         .field("msgmni", &self.msgmni)
         .field("msgssz", &self.msgssz)
         .field("msgtql", &self.msgtql)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_netlist {
    pub flags: u64,
    pub number: u32,
}

impl ::std::fmt::Debug for glibtop_netlist {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_netlist @ {:p}", self))
         .field("flags", &self.flags)
         .field("number", &self.number)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_netload {
    pub flags: u64,
    pub if_flags: u64,
    pub mtu: u32,
    pub subnet: u32,
    pub address: u32,
    pub packets_in: u64,
    pub packets_out: u64,
    pub packets_total: u64,
    pub bytes_in: u64,
    pub bytes_out: u64,
    pub bytes_total: u64,
    pub errors_in: u64,
    pub errors_out: u64,
    pub errors_total: u64,
    pub collisions: u64,
    pub address6: [u8; 16],
    pub prefix6: [u8; 16],
    pub scope6: u8,
    pub hwaddress: [u8; 8],
}

impl ::std::fmt::Debug for glibtop_netload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_netload @ {:p}", self))
         .field("flags", &self.flags)
         .field("if_flags", &self.if_flags)
         .field("mtu", &self.mtu)
         .field("subnet", &self.subnet)
         .field("address", &self.address)
         .field("packets_in", &self.packets_in)
         .field("packets_out", &self.packets_out)
         .field("packets_total", &self.packets_total)
         .field("bytes_in", &self.bytes_in)
         .field("bytes_out", &self.bytes_out)
         .field("bytes_total", &self.bytes_total)
         .field("errors_in", &self.errors_in)
         .field("errors_out", &self.errors_out)
         .field("errors_total", &self.errors_total)
         .field("collisions", &self.collisions)
         .field("address6", &self.address6)
         .field("prefix6", &self.prefix6)
         .field("scope6", &self.scope6)
         .field("hwaddress", &self.hwaddress)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_open_files_entry {
    pub fd: c_int,
    pub type_: u16,
    pub info: glibtop_open_files_entry_info,
}

impl ::std::fmt::Debug for glibtop_open_files_entry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_open_files_entry @ {:p}", self))
         .field("fd", &self.fd)
         .field("type_", &self.type_)
         .field("info", &self.info)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_open_files_entry_info_localsock {
    pub name: [c_char; 216],
}

impl ::std::fmt::Debug for glibtop_open_files_entry_info_localsock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_open_files_entry_info_localsock @ {:p}", self))
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_open_files_entry_info_sock {
    pub dest_host: [c_char; 47],
    pub dest_port: c_int,
}

impl ::std::fmt::Debug for glibtop_open_files_entry_info_sock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_open_files_entry_info_sock @ {:p}", self))
         .field("dest_port", &self.dest_port)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_ppp {
    pub flags: u64,
    pub state: u64,
    pub bytes_in: u64,
    pub bytes_out: u64,
}

impl ::std::fmt::Debug for glibtop_ppp {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_ppp @ {:p}", self))
         .field("flags", &self.flags)
         .field("state", &self.state)
         .field("bytes_in", &self.bytes_in)
         .field("bytes_out", &self.bytes_out)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_proc_affinity {
    pub flags: u64,
    pub number: u32,
    pub all: gboolean,
}

impl ::std::fmt::Debug for glibtop_proc_affinity {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_proc_affinity @ {:p}", self))
         .field("flags", &self.flags)
         .field("number", &self.number)
         .field("all", &self.all)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_proc_args {
    pub flags: u64,
    pub size: u64,
}

impl ::std::fmt::Debug for glibtop_proc_args {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_proc_args @ {:p}", self))
         .field("flags", &self.flags)
         .field("size", &self.size)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_proc_io {
    pub flags: u64,
    pub disk_rchar: u64,
    pub disk_wchar: u64,
    pub disk_rbytes: u64,
    pub disk_wbytes: u64,
    pub reserved: [u64; 10],
}

impl ::std::fmt::Debug for glibtop_proc_io {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_proc_io @ {:p}", self))
         .field("flags", &self.flags)
         .field("disk_rchar", &self.disk_rchar)
         .field("disk_wchar", &self.disk_wchar)
         .field("disk_rbytes", &self.disk_rbytes)
         .field("disk_wbytes", &self.disk_wbytes)
         .field("reserved", &self.reserved)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_proc_kernel {
    pub flags: u64,
    pub k_flags: u64,
    pub min_flt: u64,
    pub maj_flt: u64,
    pub cmin_flt: u64,
    pub cmaj_flt: u64,
    pub kstk_esp: u64,
    pub kstk_eip: u64,
    pub nwchan: u64,
    pub wchan: [c_char; 40],
}

impl ::std::fmt::Debug for glibtop_proc_kernel {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_proc_kernel @ {:p}", self))
         .field("flags", &self.flags)
         .field("k_flags", &self.k_flags)
         .field("min_flt", &self.min_flt)
         .field("maj_flt", &self.maj_flt)
         .field("cmin_flt", &self.cmin_flt)
         .field("cmaj_flt", &self.cmaj_flt)
         .field("kstk_esp", &self.kstk_esp)
         .field("kstk_eip", &self.kstk_eip)
         .field("nwchan", &self.nwchan)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_proc_map {
    pub flags: u64,
    pub number: u64,
    pub total: u64,
    pub size: u64,
}

impl ::std::fmt::Debug for glibtop_proc_map {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_proc_map @ {:p}", self))
         .field("flags", &self.flags)
         .field("number", &self.number)
         .field("total", &self.total)
         .field("size", &self.size)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_proc_mem {
    pub flags: u64,
    pub size: u64,
    pub vsize: u64,
    pub resident: u64,
    pub share: u64,
    pub rss: u64,
    pub rss_rlim: u64,
}

impl ::std::fmt::Debug for glibtop_proc_mem {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_proc_mem @ {:p}", self))
         .field("flags", &self.flags)
         .field("size", &self.size)
         .field("vsize", &self.vsize)
         .field("resident", &self.resident)
         .field("share", &self.share)
         .field("rss", &self.rss)
         .field("rss_rlim", &self.rss_rlim)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_proc_open_files {
    pub flags: u64,
    pub number: u64,
    pub total: u64,
    pub size: u64,
}

impl ::std::fmt::Debug for glibtop_proc_open_files {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_proc_open_files @ {:p}", self))
         .field("flags", &self.flags)
         .field("number", &self.number)
         .field("total", &self.total)
         .field("size", &self.size)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_proc_segment {
    pub flags: u64,
    pub text_rss: u64,
    pub shlib_rss: u64,
    pub data_rss: u64,
    pub stack_rss: u64,
    pub dirty_size: u64,
    pub start_code: u64,
    pub end_code: u64,
    pub start_stack: u64,
}

impl ::std::fmt::Debug for glibtop_proc_segment {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_proc_segment @ {:p}", self))
         .field("flags", &self.flags)
         .field("text_rss", &self.text_rss)
         .field("shlib_rss", &self.shlib_rss)
         .field("data_rss", &self.data_rss)
         .field("stack_rss", &self.stack_rss)
         .field("dirty_size", &self.dirty_size)
         .field("start_code", &self.start_code)
         .field("end_code", &self.end_code)
         .field("start_stack", &self.start_stack)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_proc_signal {
    pub flags: u64,
    pub signal: [u64; 2],
    pub blocked: [u64; 2],
    pub sigignore: [u64; 2],
    pub sigcatch: [u64; 2],
}

impl ::std::fmt::Debug for glibtop_proc_signal {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_proc_signal @ {:p}", self))
         .field("flags", &self.flags)
         .field("signal", &self.signal)
         .field("blocked", &self.blocked)
         .field("sigignore", &self.sigignore)
         .field("sigcatch", &self.sigcatch)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_proc_state {
    pub flags: u64,
    pub cmd: [c_char; 40],
    pub state: c_uint,
    pub uid: c_int,
    pub gid: c_int,
    pub ruid: c_int,
    pub rgid: c_int,
    pub has_cpu: c_int,
    pub processor: c_int,
    pub last_processor: c_int,
}

impl ::std::fmt::Debug for glibtop_proc_state {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_proc_state @ {:p}", self))
         .field("flags", &self.flags)
         .field("state", &self.state)
         .field("uid", &self.uid)
         .field("gid", &self.gid)
         .field("ruid", &self.ruid)
         .field("rgid", &self.rgid)
         .field("has_cpu", &self.has_cpu)
         .field("processor", &self.processor)
         .field("last_processor", &self.last_processor)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_proc_time {
    pub flags: u64,
    pub start_time: u64,
    pub rtime: u64,
    pub utime: u64,
    pub stime: u64,
    pub cutime: u64,
    pub cstime: u64,
    pub timeout: u64,
    pub it_real_value: u64,
    pub frequency: u64,
    pub xcpu_utime: [u64; 1024],
    pub xcpu_stime: [u64; 1024],
}

impl ::std::fmt::Debug for glibtop_proc_time {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_proc_time @ {:p}", self))
         .field("start_time", &self.start_time)
         .field("rtime", &self.rtime)
         .field("utime", &self.utime)
         .field("stime", &self.stime)
         .field("cutime", &self.cutime)
         .field("cstime", &self.cstime)
         .field("timeout", &self.timeout)
         .field("it_real_value", &self.it_real_value)
         .field("frequency", &self.frequency)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_proc_uid {
    pub flags: u64,
    pub uid: i32,
    pub euid: i32,
    pub gid: i32,
    pub egid: i32,
    pub suid: i32,
    pub sgid: i32,
    pub fsuid: i32,
    pub fsgid: i32,
    pub pid: i32,
    pub ppid: i32,
    pub pgrp: i32,
    pub session: i32,
    pub tty: i32,
    pub tpgid: i32,
    pub priority: i32,
    pub nice: i32,
    pub ngroups: i32,
    pub groups: [i32; 64],
}

impl ::std::fmt::Debug for glibtop_proc_uid {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_proc_uid @ {:p}", self))
         .field("flags", &self.flags)
         .field("uid", &self.uid)
         .field("euid", &self.euid)
         .field("gid", &self.gid)
         .field("egid", &self.egid)
         .field("suid", &self.suid)
         .field("sgid", &self.sgid)
         .field("fsuid", &self.fsuid)
         .field("fsgid", &self.fsgid)
         .field("pid", &self.pid)
         .field("ppid", &self.ppid)
         .field("pgrp", &self.pgrp)
         .field("session", &self.session)
         .field("tty", &self.tty)
         .field("tpgid", &self.tpgid)
         .field("priority", &self.priority)
         .field("nice", &self.nice)
         .field("ngroups", &self.ngroups)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_proc_wd {
    pub flags: u64,
    pub number: u32,
    pub root: [c_char; 216],
    pub exe: [c_char; 216],
}

impl ::std::fmt::Debug for glibtop_proc_wd {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_proc_wd @ {:p}", self))
         .field("flags", &self.flags)
         .field("number", &self.number)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_proclist {
    pub flags: u64,
    pub number: u64,
    pub total: u64,
    pub size: u64,
}

impl ::std::fmt::Debug for glibtop_proclist {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_proclist @ {:p}", self))
         .field("flags", &self.flags)
         .field("number", &self.number)
         .field("total", &self.total)
         .field("size", &self.size)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_response {
    pub offset: i64,
    pub size: u64,
    pub data_size: u64,
    pub u: glibtop_response_union,
}

impl ::std::fmt::Debug for glibtop_response {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_response @ {:p}", self))
         .field("offset", &self.offset)
         .field("size", &self.size)
         .field("data_size", &self.data_size)
         .field("u", &self.u)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_sem_limits {
    pub flags: u64,
    pub semmap: u64,
    pub semmni: u64,
    pub semmns: u64,
    pub semmnu: u64,
    pub semmsl: u64,
    pub semopm: u64,
    pub semume: u64,
    pub semusz: u64,
    pub semvmx: u64,
    pub semaem: u64,
}

impl ::std::fmt::Debug for glibtop_sem_limits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_sem_limits @ {:p}", self))
         .field("flags", &self.flags)
         .field("semmap", &self.semmap)
         .field("semmni", &self.semmni)
         .field("semmns", &self.semmns)
         .field("semmnu", &self.semmnu)
         .field("semmsl", &self.semmsl)
         .field("semopm", &self.semopm)
         .field("semume", &self.semume)
         .field("semusz", &self.semusz)
         .field("semvmx", &self.semvmx)
         .field("semaem", &self.semaem)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_shm_limits {
    pub flags: u64,
    pub shmmax: u64,
    pub shmmin: u64,
    pub shmmni: u64,
    pub shmseg: u64,
    pub shmall: u64,
}

impl ::std::fmt::Debug for glibtop_shm_limits {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_shm_limits @ {:p}", self))
         .field("flags", &self.flags)
         .field("shmmax", &self.shmmax)
         .field("shmmin", &self.shmmin)
         .field("shmmni", &self.shmmni)
         .field("shmseg", &self.shmseg)
         .field("shmall", &self.shmall)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_signame {
    pub number: c_int,
    pub name: *const c_char,
    pub label: *const c_char,
}

impl ::std::fmt::Debug for glibtop_signame {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_signame @ {:p}", self))
         .field("number", &self.number)
         .field("name", &self.name)
         .field("label", &self.label)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_swap {
    pub flags: u64,
    pub total: u64,
    pub used: u64,
    pub free: u64,
    pub pagein: u64,
    pub pageout: u64,
}

impl ::std::fmt::Debug for glibtop_swap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_swap @ {:p}", self))
         .field("flags", &self.flags)
         .field("total", &self.total)
         .field("used", &self.used)
         .field("free", &self.free)
         .field("pagein", &self.pagein)
         .field("pageout", &self.pageout)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_sysdeps {
    pub flags: u64,
    pub features: u64,
    pub cpu: u64,
    pub mem: u64,
    pub swap: u64,
    pub uptime: u64,
    pub loadavg: u64,
    pub shm_limits: u64,
    pub msg_limits: u64,
    pub sem_limits: u64,
    pub proclist: u64,
    pub proc_state: u64,
    pub proc_uid: u64,
    pub proc_mem: u64,
    pub proc_time: u64,
    pub proc_signal: u64,
    pub proc_kernel: u64,
    pub proc_segment: u64,
    pub proc_args: u64,
    pub proc_map: u64,
    pub proc_open_files: u64,
    pub mountlist: u64,
    pub fsusage: u64,
    pub netlist: u64,
    pub netload: u64,
    pub ppp: u64,
    pub proc_wd: u64,
    pub proc_affinity: u64,
    pub proc_io: u64,
    pub reserved0: u64,
    pub reserved1: u64,
    pub reserved2: u64,
    pub reserved3: u64,
    pub reserved4: u64,
    pub reserved5: u64,
    pub reserved6: u64,
    pub reserved7: u64,
}

impl ::std::fmt::Debug for glibtop_sysdeps {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_sysdeps @ {:p}", self))
         .field("flags", &self.flags)
         .field("features", &self.features)
         .field("cpu", &self.cpu)
         .field("mem", &self.mem)
         .field("swap", &self.swap)
         .field("uptime", &self.uptime)
         .field("loadavg", &self.loadavg)
         .field("shm_limits", &self.shm_limits)
         .field("msg_limits", &self.msg_limits)
         .field("sem_limits", &self.sem_limits)
         .field("proclist", &self.proclist)
         .field("proc_state", &self.proc_state)
         .field("proc_uid", &self.proc_uid)
         .field("proc_mem", &self.proc_mem)
         .field("proc_time", &self.proc_time)
         .field("proc_signal", &self.proc_signal)
         .field("proc_kernel", &self.proc_kernel)
         .field("proc_segment", &self.proc_segment)
         .field("proc_args", &self.proc_args)
         .field("proc_map", &self.proc_map)
         .field("proc_open_files", &self.proc_open_files)
         .field("mountlist", &self.mountlist)
         .field("fsusage", &self.fsusage)
         .field("netlist", &self.netlist)
         .field("netload", &self.netload)
         .field("ppp", &self.ppp)
         .field("proc_wd", &self.proc_wd)
         .field("proc_affinity", &self.proc_affinity)
         .field("proc_io", &self.proc_io)
         .field("reserved0", &self.reserved0)
         .field("reserved1", &self.reserved1)
         .field("reserved2", &self.reserved2)
         .field("reserved3", &self.reserved3)
         .field("reserved4", &self.reserved4)
         .field("reserved5", &self.reserved5)
         .field("reserved6", &self.reserved6)
         .field("reserved7", &self.reserved7)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_sysinfo {
    pub flags: u64,
    pub ncpu: u64,
    pub cpuinfo: [glibtop_entry; 1024],
}

impl ::std::fmt::Debug for glibtop_sysinfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_sysinfo @ {:p}", self))
         .field("flags", &self.flags)
         .field("ncpu", &self.ncpu)
         .finish()
    }
}

#[derive(Copy, Clone)]
#[repr(C)]
pub struct glibtop_uptime {
    pub flags: u64,
    pub uptime: c_double,
    pub idletime: c_double,
    pub boot_time: u64,
}

impl ::std::fmt::Debug for glibtop_uptime {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        f.debug_struct(&format!("glibtop_uptime @ {:p}", self))
         .field("flags", &self.flags)
         .field("uptime", &self.uptime)
         .field("idletime", &self.idletime)
         .field("boot_time", &self.boot_time)
         .finish()
    }
}

#[link(name = "gtop-2.0")]
extern "C" {

    //=========================================================================
    // glibtop
    //=========================================================================
    pub fn glibtop_get_type() -> GType;
    pub fn glibtop_call_l(server: *mut glibtop, command: c_uint, send_size: size_t, send_buf: *mut c_void, recv_size: size_t, recv_buf: *mut c_void) -> *mut c_void;
    pub fn glibtop_call_s(server: *mut glibtop, command: c_uint, send_size: size_t, send_buf: *mut c_void, recv_size: size_t, recv_buf: *mut c_void) -> *mut c_void;
    pub fn glibtop_close_p(server: *mut glibtop);
    pub fn glibtop_close_r(server: *mut glibtop);
    pub fn glibtop_close_s(server: *mut glibtop);
    pub fn glibtop_get_cpu_l(server: *mut glibtop, buf: *mut glibtop_cpu);
    pub fn glibtop_get_cpu_s(server: *mut glibtop, buf: *mut glibtop_cpu);
    pub fn glibtop_get_fsusage_l(server: *mut glibtop, buf: *mut glibtop_fsusage, mount_dir: *const c_char);
    pub fn glibtop_get_fsusage_s(server: *mut glibtop, buf: *mut glibtop_fsusage, mount_dir: *const c_char);
    pub fn glibtop_get_loadavg_l(server: *mut glibtop, buf: *mut glibtop_loadavg);
    pub fn glibtop_get_loadavg_s(server: *mut glibtop, buf: *mut glibtop_loadavg);
    pub fn glibtop_get_mem_l(server: *mut glibtop, buf: *mut glibtop_mem);
    pub fn glibtop_get_mem_s(server: *mut glibtop, buf: *mut glibtop_mem);
    pub fn glibtop_get_mountlist_l(server: *mut glibtop, buf: *mut glibtop_mountlist, all_fs: c_int) -> *mut glibtop_mountentry;
    pub fn glibtop_get_mountlist_s(server: *mut glibtop, buf: *mut glibtop_mountlist, all_fs: c_int) -> *mut glibtop_mountentry;
    pub fn glibtop_get_msg_limits_l(server: *mut glibtop, buf: *mut glibtop_msg_limits);
    pub fn glibtop_get_msg_limits_s(server: *mut glibtop, buf: *mut glibtop_msg_limits);
    pub fn glibtop_get_netlist_l(server: *mut glibtop, buf: *mut glibtop_netlist) -> *mut *mut c_char;
    pub fn glibtop_get_netlist_s(server: *mut glibtop, buf: *mut glibtop_netlist) -> *mut *mut c_char;
    pub fn glibtop_get_netload_l(server: *mut glibtop, buf: *mut glibtop_netload, interface: *const c_char);
    pub fn glibtop_get_netload_s(server: *mut glibtop, buf: *mut glibtop_netload, interface: *const c_char);
    pub fn glibtop_get_parameter_l(server: *mut glibtop, parameter: c_uint, data_ptr: *mut c_void, data_size: size_t) -> size_t;
    pub fn glibtop_get_ppp_l(server: *mut glibtop, buf: *mut glibtop_ppp, device: c_ushort);
    pub fn glibtop_get_ppp_s(server: *mut glibtop, buf: *mut glibtop_ppp, device: c_ushort);
    pub fn glibtop_get_proc_affinity_l(server: *mut glibtop, buf: *mut glibtop_proc_affinity, pid: c_int) -> *mut u16;
    pub fn glibtop_get_proc_affinity_s(server: *mut glibtop, buf: *mut glibtop_proc_affinity, pid: c_int) -> *mut u16;
    pub fn glibtop_get_proc_args_l(server: *mut glibtop, buf: *mut glibtop_proc_args, pid: c_int, max_len: c_uint) -> *mut c_char;
    pub fn glibtop_get_proc_args_s(server: *mut glibtop, buf: *mut glibtop_proc_args, pid: c_int, max_len: c_uint) -> *mut c_char;
    pub fn glibtop_get_proc_argv_l(server: *mut glibtop, buf: *mut glibtop_proc_args, pid: c_int, max_len: c_uint) -> *mut *mut c_char;
    pub fn glibtop_get_proc_io_l(server: *mut glibtop, buf: *mut glibtop_proc_io, pid: c_int);
    pub fn glibtop_get_proc_io_s(server: *mut glibtop, buf: *mut glibtop_proc_io, pid: c_int);
    pub fn glibtop_get_proc_kernel_l(server: *mut glibtop, buf: *mut glibtop_proc_kernel, pid: c_int);
    pub fn glibtop_get_proc_kernel_s(server: *mut glibtop, buf: *mut glibtop_proc_kernel, pid: c_int);
    pub fn glibtop_get_proc_map_l(server: *mut glibtop, buf: *mut glibtop_proc_map, pid: c_int) -> *mut glibtop_map_entry;
    pub fn glibtop_get_proc_map_s(server: *mut glibtop, buf: *mut glibtop_proc_map, pid: c_int) -> *mut glibtop_map_entry;
    pub fn glibtop_get_proc_mem_l(server: *mut glibtop, buf: *mut glibtop_proc_mem, pid: c_int);
    pub fn glibtop_get_proc_mem_s(server: *mut glibtop, buf: *mut glibtop_proc_mem, pid: c_int);
    pub fn glibtop_get_proc_open_files_l(server: *mut glibtop, buf: *mut glibtop_proc_open_files, pid: c_int) -> *mut glibtop_open_files_entry;
    pub fn glibtop_get_proc_open_files_s(server: *mut glibtop, buf: *mut glibtop_proc_open_files, pid: c_int) -> *mut glibtop_open_files_entry;
    pub fn glibtop_get_proc_segment_l(server: *mut glibtop, buf: *mut glibtop_proc_segment, pid: c_int);
    pub fn glibtop_get_proc_segment_s(server: *mut glibtop, buf: *mut glibtop_proc_segment, pid: c_int);
    pub fn glibtop_get_proc_signal_l(server: *mut glibtop, buf: *mut glibtop_proc_signal, pid: c_int);
    pub fn glibtop_get_proc_signal_s(server: *mut glibtop, buf: *mut glibtop_proc_signal, pid: c_int);
    pub fn glibtop_get_proc_state_l(server: *mut glibtop, buf: *mut glibtop_proc_state, pid: c_int);
    pub fn glibtop_get_proc_state_s(server: *mut glibtop, buf: *mut glibtop_proc_state, pid: c_int);
    pub fn glibtop_get_proc_time_l(server: *mut glibtop, buf: *mut glibtop_proc_time, pid: c_int);
    pub fn glibtop_get_proc_time_s(server: *mut glibtop, buf: *mut glibtop_proc_time, pid: c_int);
    pub fn glibtop_get_proc_uid_l(server: *mut glibtop, buf: *mut glibtop_proc_uid, pid: c_int);
    pub fn glibtop_get_proc_uid_s(server: *mut glibtop, buf: *mut glibtop_proc_uid, pid: c_int);
    pub fn glibtop_get_proc_wd_l(server: *mut glibtop, buf: *mut glibtop_proc_wd, pid: c_int) -> *mut *mut c_char;
    pub fn glibtop_get_proc_wd_s(server: *mut glibtop, buf: *mut glibtop_proc_wd, pid: c_int) -> *mut *mut c_char;
    pub fn glibtop_get_proclist_l(server: *mut glibtop, buf: *mut glibtop_proclist, which: i64, arg: i64) -> *mut c_int;
    pub fn glibtop_get_proclist_s(server: *mut glibtop, buf: *mut glibtop_proclist, which: i64, arg: i64) -> *mut c_int;
    pub fn glibtop_get_sem_limits_l(server: *mut glibtop, buf: *mut glibtop_sem_limits);
    pub fn glibtop_get_sem_limits_s(server: *mut glibtop, buf: *mut glibtop_sem_limits);
    pub fn glibtop_get_shm_limits_l(server: *mut glibtop, buf: *mut glibtop_shm_limits);
    pub fn glibtop_get_shm_limits_s(server: *mut glibtop, buf: *mut glibtop_shm_limits);
    pub fn glibtop_get_swap_l(server: *mut glibtop, buf: *mut glibtop_swap);
    pub fn glibtop_get_swap_s(server: *mut glibtop, buf: *mut glibtop_swap);
    pub fn glibtop_get_sysdeps_r(server: *mut glibtop, buf: *mut glibtop_sysdeps);
    pub fn glibtop_get_sysinfo_s(server: *mut glibtop) -> *const glibtop_sysinfo;
    pub fn glibtop_get_uptime_l(server: *mut glibtop, buf: *mut glibtop_uptime);
    pub fn glibtop_get_uptime_s(server: *mut glibtop, buf: *mut glibtop_uptime);
    pub fn glibtop_init_p(server: *mut glibtop, features: c_ulong, flags: c_uint);
    pub fn glibtop_open_l(server: *mut glibtop, program_name: *const c_char, features: c_ulong, flags: c_uint);
    pub fn glibtop_open_p(server: *mut glibtop, program_name: *const c_char, features: c_ulong, flags: c_uint);
    pub fn glibtop_open_s(server: *mut glibtop, program_name: *const c_char, features: c_ulong, flags: c_uint);
    pub fn glibtop_set_parameter_l(server: *mut glibtop, parameter: c_uint, data_ptr: *mut c_void, data_size: size_t);
    pub fn glibtop_close();
    pub fn glibtop_get_cpu(buf: *mut glibtop_cpu);
    pub fn glibtop_get_fsusage(buf: *mut glibtop_fsusage, mount_dir: *const c_char);
    pub fn glibtop_get_loadavg(buf: *mut glibtop_loadavg);
    pub fn glibtop_get_mem(buf: *mut glibtop_mem);
    pub fn glibtop_get_mountlist(buf: *mut glibtop_mountlist, all_fs: c_int) -> *mut glibtop_mountentry;
    pub fn glibtop_get_msg_limits(buf: *mut glibtop_msg_limits);
    pub fn glibtop_get_netlist(buf: *mut glibtop_netlist) -> *mut *mut c_char;
    pub fn glibtop_get_netload(buf: *mut glibtop_netload, interface: *const c_char);
    pub fn glibtop_get_ppp(buf: *mut glibtop_ppp, device: c_ushort);
    pub fn glibtop_get_proc_affinity(buf: *mut glibtop_proc_affinity, pid: c_int) -> *mut u16;
    pub fn glibtop_get_proc_args(buf: *mut glibtop_proc_args, pid: c_int, max_len: c_uint) -> *mut c_char;
    pub fn glibtop_get_proc_argv(buf: *mut glibtop_proc_args, pid: c_int, max_len: c_uint) -> *mut *mut c_char;
    pub fn glibtop_get_proc_io(buf: *mut glibtop_proc_io, pid: c_int);
    pub fn glibtop_get_proc_kernel(buf: *mut glibtop_proc_kernel, pid: c_int);
    pub fn glibtop_get_proc_map(buf: *mut glibtop_proc_map, pid: c_int) -> *mut glibtop_map_entry;
    pub fn glibtop_get_proc_mem(buf: *mut glibtop_proc_mem, pid: c_int);
    pub fn glibtop_get_proc_open_files(buf: *mut glibtop_proc_open_files, pid: c_int) -> *mut glibtop_open_files_entry;
    pub fn glibtop_get_proc_segment(buf: *mut glibtop_proc_segment, pid: c_int);
    pub fn glibtop_get_proc_signal(buf: *mut glibtop_proc_signal, pid: c_int);
    pub fn glibtop_get_proc_state(buf: *mut glibtop_proc_state, pid: c_int);
    pub fn glibtop_get_proc_time(buf: *mut glibtop_proc_time, pid: c_int);
    pub fn glibtop_get_proc_uid(buf: *mut glibtop_proc_uid, pid: c_int);
    pub fn glibtop_get_proc_wd(buf: *mut glibtop_proc_wd, pid: c_int) -> *mut *mut c_char;
    pub fn glibtop_get_proclist(buf: *mut glibtop_proclist, which: i64, arg: i64) -> *mut c_int;
    pub fn glibtop_get_sem_limits(buf: *mut glibtop_sem_limits);
    pub fn glibtop_get_shm_limits(buf: *mut glibtop_shm_limits);
    pub fn glibtop_get_swap(buf: *mut glibtop_swap);
    pub fn glibtop_get_sysdeps(buf: *mut glibtop_sysdeps);
    pub fn glibtop_get_sysinfo() -> *const glibtop_sysinfo;
    pub fn glibtop_get_uptime(buf: *mut glibtop_uptime);
    pub fn glibtop_init() -> *mut glibtop;
    pub fn glibtop_init_r(server_ptr: *mut *mut glibtop, features: c_ulong, flags: c_uint) -> *mut glibtop;
    pub fn glibtop_init_s(server_ptr: *mut *mut glibtop, features: c_ulong, flags: c_uint) -> *mut glibtop;
    pub fn glibtop_internet_addr(host: *const c_char) -> c_long;
    pub fn glibtop_make_connection(hostarg: *const c_char, portarg: c_int, s: *mut c_int) -> c_int;

    //=========================================================================
    // glibtop_map_entry
    //=========================================================================
    pub fn glibtop_map_entry_get_type() -> GType;

    //=========================================================================
    // glibtop_mountentry
    //=========================================================================
    pub fn glibtop_mountentry_get_type() -> GType;

    //=========================================================================
    // glibtop_mountlist
    //=========================================================================
    pub fn glibtop_mountlist_get_type() -> GType;

    //=========================================================================
    // glibtop_open_files_entry
    //=========================================================================
    pub fn glibtop_open_files_entry_get_type() -> GType;

    //=========================================================================
    // glibtop_proc_map
    //=========================================================================
    pub fn glibtop_proc_map_get_type() -> GType;

    //=========================================================================
    // glibtop_proc_open_files
    //=========================================================================
    pub fn glibtop_proc_open_files_get_type() -> GType;

}
